//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.10.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from C:/Users/bartt/source/repos/BartlomiejLac/IsisPapyrus/IsisPapyrus/Grammar\IsisParser.g4 by ANTLR 4.10.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.10.1")]
[System.CLSCompliant(false)]
public partial class IsisParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		LINECOMMENT=1, CHARCONST=2, STRINGCONST=3, PROGRAMSTART=4, PROGRAMEND=5, 
		INSTRUCTIONEND=6, VOID=7, CHAR=8, INT=9, BOOL=10, FRACTIONAL=11, STRING=12, 
		WHILE=13, DO=14, FOR=15, IF=16, ELSE=17, BREAK=18, CONTINUE=19, RETURN=20, 
		PRINT=21, NUMBERCONST=22, BOOLCONST=23, LEFTPAREN=24, RIGHTPAREN=25, LEFTBRACKET=26, 
		RIGHTBRACKET=27, LEFTBRACE=28, RIGHTBRACE=29, SINGLEQUOTE=30, DOUBLEQUOTE=31, 
		COMMA=32, INCREMENT=33, DECREMENT=34, INCREMENTBY=35, DECREMENTBY=36, 
		MULTIPLYBY=37, DIVIDEBY=38, PLUS=39, MINUS=40, ASSIGN=41, MULTSYMBOL=42, 
		DIVSYMBOL=43, MODSYMBOL=44, GREATEREQUAL=45, LESSEREQUAL=46, NOTEQUALS=47, 
		EQUALS=48, AND=49, OR=50, NOT=51, GREATER=52, LESSER=53, IDENTIFIER=54, 
		WHITESPACE=55, NEWLINE=56, UNRECOGNIZED=57;
	public const int
		RULE_program = 0, RULE_declarations = 1, RULE_mainFunction = 2, RULE_declarationList = 3, 
		RULE_declaration = 4, RULE_declarationVariable = 5, RULE_variableName = 6, 
		RULE_type = 7, RULE_declarationFunc = 8, RULE_functionType = 9, RULE_arguments = 10, 
		RULE_argumentsList = 11, RULE_argument = 12, RULE_instructions = 13, RULE_instructionsList = 14, 
		RULE_instruction = 15, RULE_instructionIf = 16, RULE_instructionLoop = 17, 
		RULE_instructionReturn = 18, RULE_instructionBreak = 19, RULE_instructionPrint = 20, 
		RULE_expression = 21, RULE_boolExpression = 22, RULE_andExpression = 23, 
		RULE_notExpression = 24, RULE_compareExpression = 25, RULE_compareOperator = 26, 
		RULE_sumExpression = 27, RULE_sumOperator = 28, RULE_multExpression = 29, 
		RULE_multOperator = 30, RULE_unaryExpression = 31, RULE_unaryOperator = 32, 
		RULE_factor = 33, RULE_variable = 34, RULE_constant = 35, RULE_constants = 36, 
		RULE_constantList = 37;
	public static readonly string[] ruleNames = {
		"program", "declarations", "mainFunction", "declarationList", "declaration", 
		"declarationVariable", "variableName", "type", "declarationFunc", "functionType", 
		"arguments", "argumentsList", "argument", "instructions", "instructionsList", 
		"instruction", "instructionIf", "instructionLoop", "instructionReturn", 
		"instructionBreak", "instructionPrint", "expression", "boolExpression", 
		"andExpression", "notExpression", "compareExpression", "compareOperator", 
		"sumExpression", "sumOperator", "multExpression", "multOperator", "unaryExpression", 
		"unaryOperator", "factor", "variable", "constant", "constants", "constantList"
	};

	private static readonly string[] _LiteralNames = {
		null, null, null, null, "'\\U00013080'", "'\\U0001314A'", "'\\U000132F9'", 
		"'\\U0001316F'", "'\\U000130DC'", "'\\U000130D5'", "'\\U000130D2'", "'\\U000130F2'", 
		"'\\U000130EF'", "'\\U00013133'", "'\\U00013136'", "'\\U00013138'", "'\\U00013038'", 
		"'\\U000131A3'", "'\\U000130BF'", "'\\U00013216'", "'\\U000130C2'", "'\\U000130AB'", 
		null, null, "'\\U00013023'", "'\\U00013022'", "'\\U00013024'", "'\\U00013025'", 
		"'\\U00013020'", "'\\U00013021'", "'\\U000132FE'", "'\\U0001339B'", "'\\U000133F0'", 
		null, null, null, null, null, null, "'\\U000130BD'", "'\\U000130BB'", 
		"'\\U0001335D'", "'\\U00013188'", "'\\U000133F5'", "'\\U000132AD'", null, 
		null, null, "'\\U0001339A'", "'\\U00013093'", "'\\U00013098'", "'\\U0001309C'", 
		"'\\U00013287'", "'\\U00013286'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "LINECOMMENT", "CHARCONST", "STRINGCONST", "PROGRAMSTART", "PROGRAMEND", 
		"INSTRUCTIONEND", "VOID", "CHAR", "INT", "BOOL", "FRACTIONAL", "STRING", 
		"WHILE", "DO", "FOR", "IF", "ELSE", "BREAK", "CONTINUE", "RETURN", "PRINT", 
		"NUMBERCONST", "BOOLCONST", "LEFTPAREN", "RIGHTPAREN", "LEFTBRACKET", 
		"RIGHTBRACKET", "LEFTBRACE", "RIGHTBRACE", "SINGLEQUOTE", "DOUBLEQUOTE", 
		"COMMA", "INCREMENT", "DECREMENT", "INCREMENTBY", "DECREMENTBY", "MULTIPLYBY", 
		"DIVIDEBY", "PLUS", "MINUS", "ASSIGN", "MULTSYMBOL", "DIVSYMBOL", "MODSYMBOL", 
		"GREATEREQUAL", "LESSEREQUAL", "NOTEQUALS", "EQUALS", "AND", "OR", "NOT", 
		"GREATER", "LESSER", "IDENTIFIER", "WHITESPACE", "NEWLINE", "UNRECOGNIZED"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "IsisParser.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static IsisParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public IsisParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public IsisParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class ProgramContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public DeclarationsContext declarations() {
			return GetRuleContext<DeclarationsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public MainFunctionContext mainFunction() {
			return GetRuleContext<MainFunctionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Eof() { return GetToken(IsisParser.Eof, 0); }
		public ProgramContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_program; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IIsisParserListener typedListener = listener as IIsisParserListener;
			if (typedListener != null) typedListener.EnterProgram(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IIsisParserListener typedListener = listener as IIsisParserListener;
			if (typedListener != null) typedListener.ExitProgram(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IIsisParserVisitor<TResult> typedVisitor = visitor as IIsisParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitProgram(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ProgramContext program() {
		ProgramContext _localctx = new ProgramContext(Context, State);
		EnterRule(_localctx, 0, RULE_program);
		try {
			State = 83;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,0,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 76;
				declarations();
				State = 77;
				mainFunction();
				State = 78;
				Match(Eof);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 80;
				declarations();
				State = 81;
				Match(Eof);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DeclarationsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public DeclarationListContext declarationList() {
			return GetRuleContext<DeclarationListContext>(0);
		}
		public DeclarationsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_declarations; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IIsisParserListener typedListener = listener as IIsisParserListener;
			if (typedListener != null) typedListener.EnterDeclarations(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IIsisParserListener typedListener = listener as IIsisParserListener;
			if (typedListener != null) typedListener.ExitDeclarations(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IIsisParserVisitor<TResult> typedVisitor = visitor as IIsisParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDeclarations(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DeclarationsContext declarations() {
		DeclarationsContext _localctx = new DeclarationsContext(Context, State);
		EnterRule(_localctx, 2, RULE_declarations);
		try {
			State = 87;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case VOID:
			case CHAR:
			case INT:
			case FRACTIONAL:
			case STRING:
				EnterOuterAlt(_localctx, 1);
				{
				State = 85;
				declarationList(0);
				}
				break;
			case Eof:
			case PROGRAMSTART:
				EnterOuterAlt(_localctx, 2);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MainFunctionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PROGRAMSTART() { return GetToken(IsisParser.PROGRAMSTART, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public InstructionsContext instructions() {
			return GetRuleContext<InstructionsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PROGRAMEND() { return GetToken(IsisParser.PROGRAMEND, 0); }
		public MainFunctionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_mainFunction; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IIsisParserListener typedListener = listener as IIsisParserListener;
			if (typedListener != null) typedListener.EnterMainFunction(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IIsisParserListener typedListener = listener as IIsisParserListener;
			if (typedListener != null) typedListener.ExitMainFunction(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IIsisParserVisitor<TResult> typedVisitor = visitor as IIsisParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMainFunction(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MainFunctionContext mainFunction() {
		MainFunctionContext _localctx = new MainFunctionContext(Context, State);
		EnterRule(_localctx, 4, RULE_mainFunction);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 89;
			Match(PROGRAMSTART);
			State = 90;
			instructions();
			State = 91;
			Match(PROGRAMEND);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DeclarationListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public DeclarationContext declaration() {
			return GetRuleContext<DeclarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DeclarationListContext declarationList() {
			return GetRuleContext<DeclarationListContext>(0);
		}
		public DeclarationListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_declarationList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IIsisParserListener typedListener = listener as IIsisParserListener;
			if (typedListener != null) typedListener.EnterDeclarationList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IIsisParserListener typedListener = listener as IIsisParserListener;
			if (typedListener != null) typedListener.ExitDeclarationList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IIsisParserVisitor<TResult> typedVisitor = visitor as IIsisParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDeclarationList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DeclarationListContext declarationList() {
		return declarationList(0);
	}

	private DeclarationListContext declarationList(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		DeclarationListContext _localctx = new DeclarationListContext(Context, _parentState);
		DeclarationListContext _prevctx = _localctx;
		int _startState = 6;
		EnterRecursionRule(_localctx, 6, RULE_declarationList, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 94;
			declaration();
			}
			Context.Stop = TokenStream.LT(-1);
			State = 100;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,2,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new DeclarationListContext(_parentctx, _parentState);
					PushNewRecursionContext(_localctx, _startState, RULE_declarationList);
					State = 96;
					if (!(Precpred(Context, 2))) throw new FailedPredicateException(this, "Precpred(Context, 2)");
					State = 97;
					declaration();
					}
					} 
				}
				State = 102;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,2,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class DeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public DeclarationVariableContext declarationVariable() {
			return GetRuleContext<DeclarationVariableContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INSTRUCTIONEND() { return GetToken(IsisParser.INSTRUCTIONEND, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public DeclarationFuncContext declarationFunc() {
			return GetRuleContext<DeclarationFuncContext>(0);
		}
		public DeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_declaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IIsisParserListener typedListener = listener as IIsisParserListener;
			if (typedListener != null) typedListener.EnterDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IIsisParserListener typedListener = listener as IIsisParserListener;
			if (typedListener != null) typedListener.ExitDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IIsisParserVisitor<TResult> typedVisitor = visitor as IIsisParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DeclarationContext declaration() {
		DeclarationContext _localctx = new DeclarationContext(Context, State);
		EnterRule(_localctx, 8, RULE_declaration);
		try {
			State = 107;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,3,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 103;
				declarationVariable();
				State = 104;
				Match(INSTRUCTIONEND);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 106;
				declarationFunc();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DeclarationVariableContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public VariableNameContext variableName() {
			return GetRuleContext<VariableNameContext>(0);
		}
		public DeclarationVariableContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_declarationVariable; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IIsisParserListener typedListener = listener as IIsisParserListener;
			if (typedListener != null) typedListener.EnterDeclarationVariable(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IIsisParserListener typedListener = listener as IIsisParserListener;
			if (typedListener != null) typedListener.ExitDeclarationVariable(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IIsisParserVisitor<TResult> typedVisitor = visitor as IIsisParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDeclarationVariable(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DeclarationVariableContext declarationVariable() {
		DeclarationVariableContext _localctx = new DeclarationVariableContext(Context, State);
		EnterRule(_localctx, 10, RULE_declarationVariable);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 109;
			type();
			State = 110;
			variableName();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VariableNameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(IsisParser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEFTBRACKET() { return GetToken(IsisParser.LEFTBRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RIGHTBRACKET() { return GetToken(IsisParser.RIGHTBRACKET, 0); }
		public VariableNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_variableName; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IIsisParserListener typedListener = listener as IIsisParserListener;
			if (typedListener != null) typedListener.EnterVariableName(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IIsisParserListener typedListener = listener as IIsisParserListener;
			if (typedListener != null) typedListener.ExitVariableName(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IIsisParserVisitor<TResult> typedVisitor = visitor as IIsisParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVariableName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VariableNameContext variableName() {
		VariableNameContext _localctx = new VariableNameContext(Context, State);
		EnterRule(_localctx, 12, RULE_variableName);
		try {
			State = 116;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,4,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 112;
				Match(IDENTIFIER);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 113;
				Match(IDENTIFIER);
				State = 114;
				Match(LEFTBRACKET);
				State = 115;
				Match(RIGHTBRACKET);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INT() { return GetToken(IsisParser.INT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FRACTIONAL() { return GetToken(IsisParser.FRACTIONAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CHAR() { return GetToken(IsisParser.CHAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING() { return GetToken(IsisParser.STRING, 0); }
		public TypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_type; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IIsisParserListener typedListener = listener as IIsisParserListener;
			if (typedListener != null) typedListener.EnterType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IIsisParserListener typedListener = listener as IIsisParserListener;
			if (typedListener != null) typedListener.ExitType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IIsisParserVisitor<TResult> typedVisitor = visitor as IIsisParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeContext type() {
		TypeContext _localctx = new TypeContext(Context, State);
		EnterRule(_localctx, 14, RULE_type);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 118;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << CHAR) | (1L << INT) | (1L << FRACTIONAL) | (1L << STRING))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DeclarationFuncContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public FunctionTypeContext functionType() {
			return GetRuleContext<FunctionTypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(IsisParser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEFTPAREN() { return GetToken(IsisParser.LEFTPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ArgumentsContext arguments() {
			return GetRuleContext<ArgumentsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RIGHTPAREN() { return GetToken(IsisParser.RIGHTPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEFTBRACE() { return GetToken(IsisParser.LEFTBRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public InstructionsListContext instructionsList() {
			return GetRuleContext<InstructionsListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RIGHTBRACE() { return GetToken(IsisParser.RIGHTBRACE, 0); }
		public DeclarationFuncContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_declarationFunc; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IIsisParserListener typedListener = listener as IIsisParserListener;
			if (typedListener != null) typedListener.EnterDeclarationFunc(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IIsisParserListener typedListener = listener as IIsisParserListener;
			if (typedListener != null) typedListener.ExitDeclarationFunc(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IIsisParserVisitor<TResult> typedVisitor = visitor as IIsisParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDeclarationFunc(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DeclarationFuncContext declarationFunc() {
		DeclarationFuncContext _localctx = new DeclarationFuncContext(Context, State);
		EnterRule(_localctx, 16, RULE_declarationFunc);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 120;
			functionType();
			State = 121;
			Match(IDENTIFIER);
			State = 122;
			Match(LEFTPAREN);
			State = 123;
			arguments();
			State = 124;
			Match(RIGHTPAREN);
			State = 125;
			Match(LEFTBRACE);
			State = 126;
			instructionsList(0);
			State = 127;
			Match(RIGHTBRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionTypeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VOID() { return GetToken(IsisParser.VOID, 0); }
		public FunctionTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionType; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IIsisParserListener typedListener = listener as IIsisParserListener;
			if (typedListener != null) typedListener.EnterFunctionType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IIsisParserListener typedListener = listener as IIsisParserListener;
			if (typedListener != null) typedListener.ExitFunctionType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IIsisParserVisitor<TResult> typedVisitor = visitor as IIsisParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctionType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunctionTypeContext functionType() {
		FunctionTypeContext _localctx = new FunctionTypeContext(Context, State);
		EnterRule(_localctx, 18, RULE_functionType);
		try {
			State = 131;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case CHAR:
			case INT:
			case FRACTIONAL:
			case STRING:
				EnterOuterAlt(_localctx, 1);
				{
				State = 129;
				type();
				}
				break;
			case VOID:
				EnterOuterAlt(_localctx, 2);
				{
				State = 130;
				Match(VOID);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArgumentsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ArgumentsListContext argumentsList() {
			return GetRuleContext<ArgumentsListContext>(0);
		}
		public ArgumentsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_arguments; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IIsisParserListener typedListener = listener as IIsisParserListener;
			if (typedListener != null) typedListener.EnterArguments(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IIsisParserListener typedListener = listener as IIsisParserListener;
			if (typedListener != null) typedListener.ExitArguments(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IIsisParserVisitor<TResult> typedVisitor = visitor as IIsisParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArguments(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArgumentsContext arguments() {
		ArgumentsContext _localctx = new ArgumentsContext(Context, State);
		EnterRule(_localctx, 20, RULE_arguments);
		try {
			State = 135;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case CHAR:
			case INT:
			case FRACTIONAL:
			case STRING:
				EnterOuterAlt(_localctx, 1);
				{
				State = 133;
				argumentsList(0);
				}
				break;
			case RIGHTPAREN:
				EnterOuterAlt(_localctx, 2);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArgumentsListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ArgumentContext argument() {
			return GetRuleContext<ArgumentContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ArgumentsListContext argumentsList() {
			return GetRuleContext<ArgumentsListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA() { return GetToken(IsisParser.COMMA, 0); }
		public ArgumentsListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_argumentsList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IIsisParserListener typedListener = listener as IIsisParserListener;
			if (typedListener != null) typedListener.EnterArgumentsList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IIsisParserListener typedListener = listener as IIsisParserListener;
			if (typedListener != null) typedListener.ExitArgumentsList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IIsisParserVisitor<TResult> typedVisitor = visitor as IIsisParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArgumentsList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArgumentsListContext argumentsList() {
		return argumentsList(0);
	}

	private ArgumentsListContext argumentsList(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		ArgumentsListContext _localctx = new ArgumentsListContext(Context, _parentState);
		ArgumentsListContext _prevctx = _localctx;
		int _startState = 22;
		EnterRecursionRule(_localctx, 22, RULE_argumentsList, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 138;
			argument();
			}
			Context.Stop = TokenStream.LT(-1);
			State = 145;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,7,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new ArgumentsListContext(_parentctx, _parentState);
					PushNewRecursionContext(_localctx, _startState, RULE_argumentsList);
					State = 140;
					if (!(Precpred(Context, 2))) throw new FailedPredicateException(this, "Precpred(Context, 2)");
					State = 141;
					Match(COMMA);
					State = 142;
					argument();
					}
					} 
				}
				State = 147;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,7,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class ArgumentContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public VariableNameContext variableName() {
			return GetRuleContext<VariableNameContext>(0);
		}
		public ArgumentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_argument; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IIsisParserListener typedListener = listener as IIsisParserListener;
			if (typedListener != null) typedListener.EnterArgument(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IIsisParserListener typedListener = listener as IIsisParserListener;
			if (typedListener != null) typedListener.ExitArgument(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IIsisParserVisitor<TResult> typedVisitor = visitor as IIsisParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArgument(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArgumentContext argument() {
		ArgumentContext _localctx = new ArgumentContext(Context, State);
		EnterRule(_localctx, 24, RULE_argument);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 148;
			type();
			State = 149;
			variableName();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InstructionsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public InstructionsListContext instructionsList() {
			return GetRuleContext<InstructionsListContext>(0);
		}
		public InstructionsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_instructions; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IIsisParserListener typedListener = listener as IIsisParserListener;
			if (typedListener != null) typedListener.EnterInstructions(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IIsisParserListener typedListener = listener as IIsisParserListener;
			if (typedListener != null) typedListener.ExitInstructions(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IIsisParserVisitor<TResult> typedVisitor = visitor as IIsisParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInstructions(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public InstructionsContext instructions() {
		InstructionsContext _localctx = new InstructionsContext(Context, State);
		EnterRule(_localctx, 26, RULE_instructions);
		try {
			State = 153;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case CHARCONST:
			case STRINGCONST:
			case CHAR:
			case INT:
			case FRACTIONAL:
			case STRING:
			case WHILE:
			case DO:
			case FOR:
			case IF:
			case BREAK:
			case CONTINUE:
			case RETURN:
			case PRINT:
			case NUMBERCONST:
			case BOOLCONST:
			case LEFTBRACKET:
			case PLUS:
			case MINUS:
			case NOT:
			case IDENTIFIER:
				EnterOuterAlt(_localctx, 1);
				{
				State = 151;
				instructionsList(0);
				}
				break;
			case PROGRAMEND:
			case RIGHTBRACE:
				EnterOuterAlt(_localctx, 2);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InstructionsListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public InstructionContext instruction() {
			return GetRuleContext<InstructionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public InstructionsListContext instructionsList() {
			return GetRuleContext<InstructionsListContext>(0);
		}
		public InstructionsListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_instructionsList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IIsisParserListener typedListener = listener as IIsisParserListener;
			if (typedListener != null) typedListener.EnterInstructionsList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IIsisParserListener typedListener = listener as IIsisParserListener;
			if (typedListener != null) typedListener.ExitInstructionsList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IIsisParserVisitor<TResult> typedVisitor = visitor as IIsisParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInstructionsList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public InstructionsListContext instructionsList() {
		return instructionsList(0);
	}

	private InstructionsListContext instructionsList(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		InstructionsListContext _localctx = new InstructionsListContext(Context, _parentState);
		InstructionsListContext _prevctx = _localctx;
		int _startState = 28;
		EnterRecursionRule(_localctx, 28, RULE_instructionsList, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 156;
			instruction();
			}
			Context.Stop = TokenStream.LT(-1);
			State = 162;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,9,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new InstructionsListContext(_parentctx, _parentState);
					PushNewRecursionContext(_localctx, _startState, RULE_instructionsList);
					State = 158;
					if (!(Precpred(Context, 2))) throw new FailedPredicateException(this, "Precpred(Context, 2)");
					State = 159;
					instruction();
					}
					} 
				}
				State = 164;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,9,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class InstructionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INSTRUCTIONEND() { return GetToken(IsisParser.INSTRUCTIONEND, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public InstructionIfContext instructionIf() {
			return GetRuleContext<InstructionIfContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public InstructionLoopContext instructionLoop() {
			return GetRuleContext<InstructionLoopContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public InstructionReturnContext instructionReturn() {
			return GetRuleContext<InstructionReturnContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public InstructionBreakContext instructionBreak() {
			return GetRuleContext<InstructionBreakContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public InstructionPrintContext instructionPrint() {
			return GetRuleContext<InstructionPrintContext>(0);
		}
		public InstructionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_instruction; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IIsisParserListener typedListener = listener as IIsisParserListener;
			if (typedListener != null) typedListener.EnterInstruction(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IIsisParserListener typedListener = listener as IIsisParserListener;
			if (typedListener != null) typedListener.ExitInstruction(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IIsisParserVisitor<TResult> typedVisitor = visitor as IIsisParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInstruction(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public InstructionContext instruction() {
		InstructionContext _localctx = new InstructionContext(Context, State);
		EnterRule(_localctx, 30, RULE_instruction);
		try {
			State = 173;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case CHARCONST:
			case STRINGCONST:
			case CHAR:
			case INT:
			case FRACTIONAL:
			case STRING:
			case NUMBERCONST:
			case BOOLCONST:
			case LEFTBRACKET:
			case PLUS:
			case MINUS:
			case NOT:
			case IDENTIFIER:
				EnterOuterAlt(_localctx, 1);
				{
				State = 165;
				expression();
				State = 166;
				Match(INSTRUCTIONEND);
				}
				break;
			case IF:
				EnterOuterAlt(_localctx, 2);
				{
				State = 168;
				instructionIf();
				}
				break;
			case WHILE:
			case DO:
			case FOR:
				EnterOuterAlt(_localctx, 3);
				{
				State = 169;
				instructionLoop();
				}
				break;
			case RETURN:
				EnterOuterAlt(_localctx, 4);
				{
				State = 170;
				instructionReturn();
				}
				break;
			case BREAK:
			case CONTINUE:
				EnterOuterAlt(_localctx, 5);
				{
				State = 171;
				instructionBreak();
				}
				break;
			case PRINT:
				EnterOuterAlt(_localctx, 6);
				{
				State = 172;
				instructionPrint();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InstructionIfContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IF() { return GetToken(IsisParser.IF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEFTPAREN() { return GetToken(IsisParser.LEFTPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public BoolExpressionContext boolExpression() {
			return GetRuleContext<BoolExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RIGHTPAREN() { return GetToken(IsisParser.RIGHTPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] LEFTBRACE() { return GetTokens(IsisParser.LEFTBRACE); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEFTBRACE(int i) {
			return GetToken(IsisParser.LEFTBRACE, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public InstructionsContext[] instructions() {
			return GetRuleContexts<InstructionsContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public InstructionsContext instructions(int i) {
			return GetRuleContext<InstructionsContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] RIGHTBRACE() { return GetTokens(IsisParser.RIGHTBRACE); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RIGHTBRACE(int i) {
			return GetToken(IsisParser.RIGHTBRACE, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ELSE() { return GetToken(IsisParser.ELSE, 0); }
		public InstructionIfContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_instructionIf; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IIsisParserListener typedListener = listener as IIsisParserListener;
			if (typedListener != null) typedListener.EnterInstructionIf(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IIsisParserListener typedListener = listener as IIsisParserListener;
			if (typedListener != null) typedListener.ExitInstructionIf(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IIsisParserVisitor<TResult> typedVisitor = visitor as IIsisParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInstructionIf(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public InstructionIfContext instructionIf() {
		InstructionIfContext _localctx = new InstructionIfContext(Context, State);
		EnterRule(_localctx, 32, RULE_instructionIf);
		try {
			State = 195;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,11,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 175;
				Match(IF);
				State = 176;
				Match(LEFTPAREN);
				State = 177;
				boolExpression(0);
				State = 178;
				Match(RIGHTPAREN);
				State = 179;
				Match(LEFTBRACE);
				State = 180;
				instructions();
				State = 181;
				Match(RIGHTBRACE);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 183;
				Match(IF);
				State = 184;
				Match(LEFTPAREN);
				State = 185;
				boolExpression(0);
				State = 186;
				Match(RIGHTPAREN);
				State = 187;
				Match(LEFTBRACE);
				State = 188;
				instructions();
				State = 189;
				Match(RIGHTBRACE);
				State = 190;
				Match(ELSE);
				State = 191;
				Match(LEFTBRACE);
				State = 192;
				instructions();
				State = 193;
				Match(RIGHTBRACE);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InstructionLoopContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FOR() { return GetToken(IsisParser.FOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEFTPAREN() { return GetToken(IsisParser.LEFTPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] INSTRUCTIONEND() { return GetTokens(IsisParser.INSTRUCTIONEND); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INSTRUCTIONEND(int i) {
			return GetToken(IsisParser.INSTRUCTIONEND, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BoolExpressionContext boolExpression() {
			return GetRuleContext<BoolExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RIGHTPAREN() { return GetToken(IsisParser.RIGHTPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEFTBRACE() { return GetToken(IsisParser.LEFTBRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public InstructionsContext instructions() {
			return GetRuleContext<InstructionsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RIGHTBRACE() { return GetToken(IsisParser.RIGHTBRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WHILE() { return GetToken(IsisParser.WHILE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DO() { return GetToken(IsisParser.DO, 0); }
		public InstructionLoopContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_instructionLoop; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IIsisParserListener typedListener = listener as IIsisParserListener;
			if (typedListener != null) typedListener.EnterInstructionLoop(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IIsisParserListener typedListener = listener as IIsisParserListener;
			if (typedListener != null) typedListener.ExitInstructionLoop(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IIsisParserVisitor<TResult> typedVisitor = visitor as IIsisParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInstructionLoop(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public InstructionLoopContext instructionLoop() {
		InstructionLoopContext _localctx = new InstructionLoopContext(Context, State);
		EnterRule(_localctx, 34, RULE_instructionLoop);
		try {
			State = 226;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case FOR:
				EnterOuterAlt(_localctx, 1);
				{
				State = 197;
				Match(FOR);
				State = 198;
				Match(LEFTPAREN);
				State = 199;
				expression();
				State = 200;
				Match(INSTRUCTIONEND);
				State = 201;
				boolExpression(0);
				State = 202;
				Match(INSTRUCTIONEND);
				State = 203;
				expression();
				State = 204;
				Match(RIGHTPAREN);
				State = 205;
				Match(LEFTBRACE);
				State = 206;
				instructions();
				State = 207;
				Match(RIGHTBRACE);
				}
				break;
			case WHILE:
				EnterOuterAlt(_localctx, 2);
				{
				State = 209;
				Match(WHILE);
				State = 210;
				Match(LEFTPAREN);
				State = 211;
				boolExpression(0);
				State = 212;
				Match(RIGHTPAREN);
				State = 213;
				Match(LEFTBRACE);
				State = 214;
				instructions();
				State = 215;
				Match(RIGHTBRACE);
				}
				break;
			case DO:
				EnterOuterAlt(_localctx, 3);
				{
				State = 217;
				Match(DO);
				State = 218;
				Match(LEFTBRACE);
				State = 219;
				instructions();
				State = 220;
				Match(RIGHTBRACE);
				State = 221;
				Match(WHILE);
				State = 222;
				Match(LEFTPAREN);
				State = 223;
				boolExpression(0);
				State = 224;
				Match(RIGHTPAREN);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InstructionReturnContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RETURN() { return GetToken(IsisParser.RETURN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INSTRUCTIONEND() { return GetToken(IsisParser.INSTRUCTIONEND, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public InstructionReturnContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_instructionReturn; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IIsisParserListener typedListener = listener as IIsisParserListener;
			if (typedListener != null) typedListener.EnterInstructionReturn(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IIsisParserListener typedListener = listener as IIsisParserListener;
			if (typedListener != null) typedListener.ExitInstructionReturn(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IIsisParserVisitor<TResult> typedVisitor = visitor as IIsisParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInstructionReturn(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public InstructionReturnContext instructionReturn() {
		InstructionReturnContext _localctx = new InstructionReturnContext(Context, State);
		EnterRule(_localctx, 36, RULE_instructionReturn);
		try {
			State = 234;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,13,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 228;
				Match(RETURN);
				State = 229;
				Match(INSTRUCTIONEND);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 230;
				Match(RETURN);
				State = 231;
				expression();
				State = 232;
				Match(INSTRUCTIONEND);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InstructionBreakContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BREAK() { return GetToken(IsisParser.BREAK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INSTRUCTIONEND() { return GetToken(IsisParser.INSTRUCTIONEND, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONTINUE() { return GetToken(IsisParser.CONTINUE, 0); }
		public InstructionBreakContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_instructionBreak; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IIsisParserListener typedListener = listener as IIsisParserListener;
			if (typedListener != null) typedListener.EnterInstructionBreak(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IIsisParserListener typedListener = listener as IIsisParserListener;
			if (typedListener != null) typedListener.ExitInstructionBreak(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IIsisParserVisitor<TResult> typedVisitor = visitor as IIsisParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInstructionBreak(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public InstructionBreakContext instructionBreak() {
		InstructionBreakContext _localctx = new InstructionBreakContext(Context, State);
		EnterRule(_localctx, 38, RULE_instructionBreak);
		try {
			State = 240;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case BREAK:
				EnterOuterAlt(_localctx, 1);
				{
				State = 236;
				Match(BREAK);
				State = 237;
				Match(INSTRUCTIONEND);
				}
				break;
			case CONTINUE:
				EnterOuterAlt(_localctx, 2);
				{
				State = 238;
				Match(CONTINUE);
				State = 239;
				Match(INSTRUCTIONEND);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InstructionPrintContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PRINT() { return GetToken(IsisParser.PRINT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEFTPAREN() { return GetToken(IsisParser.LEFTPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SumExpressionContext sumExpression() {
			return GetRuleContext<SumExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RIGHTPAREN() { return GetToken(IsisParser.RIGHTPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INSTRUCTIONEND() { return GetToken(IsisParser.INSTRUCTIONEND, 0); }
		public InstructionPrintContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_instructionPrint; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IIsisParserListener typedListener = listener as IIsisParserListener;
			if (typedListener != null) typedListener.EnterInstructionPrint(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IIsisParserListener typedListener = listener as IIsisParserListener;
			if (typedListener != null) typedListener.ExitInstructionPrint(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IIsisParserVisitor<TResult> typedVisitor = visitor as IIsisParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInstructionPrint(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public InstructionPrintContext instructionPrint() {
		InstructionPrintContext _localctx = new InstructionPrintContext(Context, State);
		EnterRule(_localctx, 40, RULE_instructionPrint);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 242;
			Match(PRINT);
			State = 243;
			Match(LEFTPAREN);
			State = 244;
			sumExpression(0);
			State = 245;
			Match(RIGHTPAREN);
			State = 246;
			Match(INSTRUCTIONEND);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public VariableContext variable() {
			return GetRuleContext<VariableContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASSIGN() { return GetToken(IsisParser.ASSIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INCREMENTBY() { return GetToken(IsisParser.INCREMENTBY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DECREMENTBY() { return GetToken(IsisParser.DECREMENTBY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MULTIPLYBY() { return GetToken(IsisParser.MULTIPLYBY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DIVIDEBY() { return GetToken(IsisParser.DIVIDEBY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INCREMENT() { return GetToken(IsisParser.INCREMENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DECREMENT() { return GetToken(IsisParser.DECREMENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public BoolExpressionContext boolExpression() {
			return GetRuleContext<BoolExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SumExpressionContext sumExpression() {
			return GetRuleContext<SumExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DeclarationVariableContext declarationVariable() {
			return GetRuleContext<DeclarationVariableContext>(0);
		}
		public ExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IIsisParserListener typedListener = listener as IIsisParserListener;
			if (typedListener != null) typedListener.EnterExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IIsisParserListener typedListener = listener as IIsisParserListener;
			if (typedListener != null) typedListener.ExitExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IIsisParserVisitor<TResult> typedVisitor = visitor as IIsisParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionContext expression() {
		ExpressionContext _localctx = new ExpressionContext(Context, State);
		EnterRule(_localctx, 42, RULE_expression);
		try {
			State = 281;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,15,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 248;
				variable();
				State = 249;
				Match(ASSIGN);
				State = 250;
				expression();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 252;
				variable();
				State = 253;
				Match(INCREMENTBY);
				State = 254;
				expression();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 256;
				variable();
				State = 257;
				Match(DECREMENTBY);
				State = 258;
				expression();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 260;
				variable();
				State = 261;
				Match(MULTIPLYBY);
				State = 262;
				expression();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 264;
				variable();
				State = 265;
				Match(DIVIDEBY);
				State = 266;
				expression();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 268;
				variable();
				State = 269;
				Match(INCREMENT);
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 271;
				variable();
				State = 272;
				Match(DECREMENT);
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 274;
				boolExpression(0);
				}
				break;
			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 275;
				sumExpression(0);
				}
				break;
			case 10:
				EnterOuterAlt(_localctx, 10);
				{
				State = 276;
				declarationVariable();
				}
				break;
			case 11:
				EnterOuterAlt(_localctx, 11);
				{
				State = 277;
				declarationVariable();
				State = 278;
				Match(ASSIGN);
				State = 279;
				expression();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BoolExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public AndExpressionContext andExpression() {
			return GetRuleContext<AndExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BoolExpressionContext boolExpression() {
			return GetRuleContext<BoolExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OR() { return GetToken(IsisParser.OR, 0); }
		public BoolExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_boolExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IIsisParserListener typedListener = listener as IIsisParserListener;
			if (typedListener != null) typedListener.EnterBoolExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IIsisParserListener typedListener = listener as IIsisParserListener;
			if (typedListener != null) typedListener.ExitBoolExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IIsisParserVisitor<TResult> typedVisitor = visitor as IIsisParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBoolExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BoolExpressionContext boolExpression() {
		return boolExpression(0);
	}

	private BoolExpressionContext boolExpression(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		BoolExpressionContext _localctx = new BoolExpressionContext(Context, _parentState);
		BoolExpressionContext _prevctx = _localctx;
		int _startState = 44;
		EnterRecursionRule(_localctx, 44, RULE_boolExpression, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 284;
			andExpression(0);
			}
			Context.Stop = TokenStream.LT(-1);
			State = 291;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,16,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new BoolExpressionContext(_parentctx, _parentState);
					PushNewRecursionContext(_localctx, _startState, RULE_boolExpression);
					State = 286;
					if (!(Precpred(Context, 2))) throw new FailedPredicateException(this, "Precpred(Context, 2)");
					State = 287;
					Match(OR);
					State = 288;
					andExpression(0);
					}
					} 
				}
				State = 293;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,16,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class AndExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public NotExpressionContext notExpression() {
			return GetRuleContext<NotExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AndExpressionContext andExpression() {
			return GetRuleContext<AndExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AND() { return GetToken(IsisParser.AND, 0); }
		public AndExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_andExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IIsisParserListener typedListener = listener as IIsisParserListener;
			if (typedListener != null) typedListener.EnterAndExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IIsisParserListener typedListener = listener as IIsisParserListener;
			if (typedListener != null) typedListener.ExitAndExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IIsisParserVisitor<TResult> typedVisitor = visitor as IIsisParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAndExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AndExpressionContext andExpression() {
		return andExpression(0);
	}

	private AndExpressionContext andExpression(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		AndExpressionContext _localctx = new AndExpressionContext(Context, _parentState);
		AndExpressionContext _prevctx = _localctx;
		int _startState = 46;
		EnterRecursionRule(_localctx, 46, RULE_andExpression, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 295;
			notExpression();
			}
			Context.Stop = TokenStream.LT(-1);
			State = 302;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,17,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new AndExpressionContext(_parentctx, _parentState);
					PushNewRecursionContext(_localctx, _startState, RULE_andExpression);
					State = 297;
					if (!(Precpred(Context, 2))) throw new FailedPredicateException(this, "Precpred(Context, 2)");
					State = 298;
					Match(AND);
					State = 299;
					notExpression();
					}
					} 
				}
				State = 304;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,17,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class NotExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOT() { return GetToken(IsisParser.NOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public NotExpressionContext notExpression() {
			return GetRuleContext<NotExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CompareExpressionContext compareExpression() {
			return GetRuleContext<CompareExpressionContext>(0);
		}
		public NotExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_notExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IIsisParserListener typedListener = listener as IIsisParserListener;
			if (typedListener != null) typedListener.EnterNotExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IIsisParserListener typedListener = listener as IIsisParserListener;
			if (typedListener != null) typedListener.ExitNotExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IIsisParserVisitor<TResult> typedVisitor = visitor as IIsisParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNotExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NotExpressionContext notExpression() {
		NotExpressionContext _localctx = new NotExpressionContext(Context, State);
		EnterRule(_localctx, 48, RULE_notExpression);
		try {
			State = 308;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case NOT:
				EnterOuterAlt(_localctx, 1);
				{
				State = 305;
				Match(NOT);
				State = 306;
				notExpression();
				}
				break;
			case CHARCONST:
			case STRINGCONST:
			case NUMBERCONST:
			case BOOLCONST:
			case LEFTBRACKET:
			case PLUS:
			case MINUS:
			case IDENTIFIER:
				EnterOuterAlt(_localctx, 2);
				{
				State = 307;
				compareExpression();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CompareExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public SumExpressionContext[] sumExpression() {
			return GetRuleContexts<SumExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public SumExpressionContext sumExpression(int i) {
			return GetRuleContext<SumExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CompareOperatorContext compareOperator() {
			return GetRuleContext<CompareOperatorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BOOLCONST() { return GetToken(IsisParser.BOOLCONST, 0); }
		public CompareExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_compareExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IIsisParserListener typedListener = listener as IIsisParserListener;
			if (typedListener != null) typedListener.EnterCompareExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IIsisParserListener typedListener = listener as IIsisParserListener;
			if (typedListener != null) typedListener.ExitCompareExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IIsisParserVisitor<TResult> typedVisitor = visitor as IIsisParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCompareExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CompareExpressionContext compareExpression() {
		CompareExpressionContext _localctx = new CompareExpressionContext(Context, State);
		EnterRule(_localctx, 50, RULE_compareExpression);
		try {
			State = 315;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,19,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 310;
				sumExpression(0);
				State = 311;
				compareOperator();
				State = 312;
				sumExpression(0);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 314;
				Match(BOOLCONST);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CompareOperatorContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUALS() { return GetToken(IsisParser.EQUALS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOTEQUALS() { return GetToken(IsisParser.NOTEQUALS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GREATER() { return GetToken(IsisParser.GREATER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GREATEREQUAL() { return GetToken(IsisParser.GREATEREQUAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LESSER() { return GetToken(IsisParser.LESSER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LESSEREQUAL() { return GetToken(IsisParser.LESSEREQUAL, 0); }
		public CompareOperatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_compareOperator; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IIsisParserListener typedListener = listener as IIsisParserListener;
			if (typedListener != null) typedListener.EnterCompareOperator(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IIsisParserListener typedListener = listener as IIsisParserListener;
			if (typedListener != null) typedListener.ExitCompareOperator(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IIsisParserVisitor<TResult> typedVisitor = visitor as IIsisParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCompareOperator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CompareOperatorContext compareOperator() {
		CompareOperatorContext _localctx = new CompareOperatorContext(Context, State);
		EnterRule(_localctx, 52, RULE_compareOperator);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 317;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << GREATEREQUAL) | (1L << LESSEREQUAL) | (1L << NOTEQUALS) | (1L << EQUALS) | (1L << GREATER) | (1L << LESSER))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SumExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public MultExpressionContext multExpression() {
			return GetRuleContext<MultExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SumExpressionContext sumExpression() {
			return GetRuleContext<SumExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SumOperatorContext sumOperator() {
			return GetRuleContext<SumOperatorContext>(0);
		}
		public SumExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_sumExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IIsisParserListener typedListener = listener as IIsisParserListener;
			if (typedListener != null) typedListener.EnterSumExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IIsisParserListener typedListener = listener as IIsisParserListener;
			if (typedListener != null) typedListener.ExitSumExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IIsisParserVisitor<TResult> typedVisitor = visitor as IIsisParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSumExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SumExpressionContext sumExpression() {
		return sumExpression(0);
	}

	private SumExpressionContext sumExpression(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		SumExpressionContext _localctx = new SumExpressionContext(Context, _parentState);
		SumExpressionContext _prevctx = _localctx;
		int _startState = 54;
		EnterRecursionRule(_localctx, 54, RULE_sumExpression, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 320;
			multExpression(0);
			}
			Context.Stop = TokenStream.LT(-1);
			State = 328;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,20,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new SumExpressionContext(_parentctx, _parentState);
					PushNewRecursionContext(_localctx, _startState, RULE_sumExpression);
					State = 322;
					if (!(Precpred(Context, 2))) throw new FailedPredicateException(this, "Precpred(Context, 2)");
					State = 323;
					sumOperator();
					State = 324;
					multExpression(0);
					}
					} 
				}
				State = 330;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,20,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class SumOperatorContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PLUS() { return GetToken(IsisParser.PLUS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MINUS() { return GetToken(IsisParser.MINUS, 0); }
		public SumOperatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_sumOperator; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IIsisParserListener typedListener = listener as IIsisParserListener;
			if (typedListener != null) typedListener.EnterSumOperator(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IIsisParserListener typedListener = listener as IIsisParserListener;
			if (typedListener != null) typedListener.ExitSumOperator(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IIsisParserVisitor<TResult> typedVisitor = visitor as IIsisParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSumOperator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SumOperatorContext sumOperator() {
		SumOperatorContext _localctx = new SumOperatorContext(Context, State);
		EnterRule(_localctx, 56, RULE_sumOperator);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 331;
			_la = TokenStream.LA(1);
			if ( !(_la==PLUS || _la==MINUS) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MultExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public UnaryExpressionContext unaryExpression() {
			return GetRuleContext<UnaryExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public MultExpressionContext multExpression() {
			return GetRuleContext<MultExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public MultOperatorContext multOperator() {
			return GetRuleContext<MultOperatorContext>(0);
		}
		public MultExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_multExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IIsisParserListener typedListener = listener as IIsisParserListener;
			if (typedListener != null) typedListener.EnterMultExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IIsisParserListener typedListener = listener as IIsisParserListener;
			if (typedListener != null) typedListener.ExitMultExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IIsisParserVisitor<TResult> typedVisitor = visitor as IIsisParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMultExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MultExpressionContext multExpression() {
		return multExpression(0);
	}

	private MultExpressionContext multExpression(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		MultExpressionContext _localctx = new MultExpressionContext(Context, _parentState);
		MultExpressionContext _prevctx = _localctx;
		int _startState = 58;
		EnterRecursionRule(_localctx, 58, RULE_multExpression, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 334;
			unaryExpression();
			}
			Context.Stop = TokenStream.LT(-1);
			State = 342;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,21,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new MultExpressionContext(_parentctx, _parentState);
					PushNewRecursionContext(_localctx, _startState, RULE_multExpression);
					State = 336;
					if (!(Precpred(Context, 2))) throw new FailedPredicateException(this, "Precpred(Context, 2)");
					State = 337;
					multOperator();
					State = 338;
					unaryExpression();
					}
					} 
				}
				State = 344;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,21,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class MultOperatorContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MULTSYMBOL() { return GetToken(IsisParser.MULTSYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DIVSYMBOL() { return GetToken(IsisParser.DIVSYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MODSYMBOL() { return GetToken(IsisParser.MODSYMBOL, 0); }
		public MultOperatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_multOperator; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IIsisParserListener typedListener = listener as IIsisParserListener;
			if (typedListener != null) typedListener.EnterMultOperator(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IIsisParserListener typedListener = listener as IIsisParserListener;
			if (typedListener != null) typedListener.ExitMultOperator(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IIsisParserVisitor<TResult> typedVisitor = visitor as IIsisParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMultOperator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MultOperatorContext multOperator() {
		MultOperatorContext _localctx = new MultOperatorContext(Context, State);
		EnterRule(_localctx, 60, RULE_multOperator);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 345;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << MULTSYMBOL) | (1L << DIVSYMBOL) | (1L << MODSYMBOL))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UnaryExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public UnaryOperatorContext unaryOperator() {
			return GetRuleContext<UnaryOperatorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public UnaryExpressionContext unaryExpression() {
			return GetRuleContext<UnaryExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FactorContext factor() {
			return GetRuleContext<FactorContext>(0);
		}
		public UnaryExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_unaryExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IIsisParserListener typedListener = listener as IIsisParserListener;
			if (typedListener != null) typedListener.EnterUnaryExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IIsisParserListener typedListener = listener as IIsisParserListener;
			if (typedListener != null) typedListener.ExitUnaryExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IIsisParserVisitor<TResult> typedVisitor = visitor as IIsisParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUnaryExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UnaryExpressionContext unaryExpression() {
		UnaryExpressionContext _localctx = new UnaryExpressionContext(Context, State);
		EnterRule(_localctx, 62, RULE_unaryExpression);
		try {
			State = 351;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case PLUS:
			case MINUS:
				EnterOuterAlt(_localctx, 1);
				{
				State = 347;
				unaryOperator();
				State = 348;
				unaryExpression();
				}
				break;
			case CHARCONST:
			case STRINGCONST:
			case NUMBERCONST:
			case BOOLCONST:
			case LEFTBRACKET:
			case IDENTIFIER:
				EnterOuterAlt(_localctx, 2);
				{
				State = 350;
				factor();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UnaryOperatorContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PLUS() { return GetToken(IsisParser.PLUS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MINUS() { return GetToken(IsisParser.MINUS, 0); }
		public UnaryOperatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_unaryOperator; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IIsisParserListener typedListener = listener as IIsisParserListener;
			if (typedListener != null) typedListener.EnterUnaryOperator(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IIsisParserListener typedListener = listener as IIsisParserListener;
			if (typedListener != null) typedListener.ExitUnaryOperator(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IIsisParserVisitor<TResult> typedVisitor = visitor as IIsisParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUnaryOperator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UnaryOperatorContext unaryOperator() {
		UnaryOperatorContext _localctx = new UnaryOperatorContext(Context, State);
		EnterRule(_localctx, 64, RULE_unaryOperator);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 353;
			_la = TokenStream.LA(1);
			if ( !(_la==PLUS || _la==MINUS) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FactorContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public VariableContext variable() {
			return GetRuleContext<VariableContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ConstantContext constant() {
			return GetRuleContext<ConstantContext>(0);
		}
		public FactorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_factor; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IIsisParserListener typedListener = listener as IIsisParserListener;
			if (typedListener != null) typedListener.EnterFactor(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IIsisParserListener typedListener = listener as IIsisParserListener;
			if (typedListener != null) typedListener.ExitFactor(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IIsisParserVisitor<TResult> typedVisitor = visitor as IIsisParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFactor(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FactorContext factor() {
		FactorContext _localctx = new FactorContext(Context, State);
		EnterRule(_localctx, 66, RULE_factor);
		try {
			State = 357;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case IDENTIFIER:
				EnterOuterAlt(_localctx, 1);
				{
				State = 355;
				variable();
				}
				break;
			case CHARCONST:
			case STRINGCONST:
			case NUMBERCONST:
			case BOOLCONST:
			case LEFTBRACKET:
				EnterOuterAlt(_localctx, 2);
				{
				State = 356;
				constant();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VariableContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(IsisParser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEFTBRACKET() { return GetToken(IsisParser.LEFTBRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NUMBERCONST() { return GetToken(IsisParser.NUMBERCONST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RIGHTBRACKET() { return GetToken(IsisParser.RIGHTBRACKET, 0); }
		public VariableContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_variable; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IIsisParserListener typedListener = listener as IIsisParserListener;
			if (typedListener != null) typedListener.EnterVariable(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IIsisParserListener typedListener = listener as IIsisParserListener;
			if (typedListener != null) typedListener.ExitVariable(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IIsisParserVisitor<TResult> typedVisitor = visitor as IIsisParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVariable(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VariableContext variable() {
		VariableContext _localctx = new VariableContext(Context, State);
		EnterRule(_localctx, 68, RULE_variable);
		try {
			State = 364;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,24,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 359;
				Match(IDENTIFIER);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 360;
				Match(IDENTIFIER);
				State = 361;
				Match(LEFTBRACKET);
				State = 362;
				Match(NUMBERCONST);
				State = 363;
				Match(RIGHTBRACKET);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConstantContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CHARCONST() { return GetToken(IsisParser.CHARCONST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRINGCONST() { return GetToken(IsisParser.STRINGCONST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BOOLCONST() { return GetToken(IsisParser.BOOLCONST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NUMBERCONST() { return GetToken(IsisParser.NUMBERCONST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEFTBRACKET() { return GetToken(IsisParser.LEFTBRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ConstantsContext constants() {
			return GetRuleContext<ConstantsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RIGHTBRACKET() { return GetToken(IsisParser.RIGHTBRACKET, 0); }
		public ConstantContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_constant; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IIsisParserListener typedListener = listener as IIsisParserListener;
			if (typedListener != null) typedListener.EnterConstant(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IIsisParserListener typedListener = listener as IIsisParserListener;
			if (typedListener != null) typedListener.ExitConstant(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IIsisParserVisitor<TResult> typedVisitor = visitor as IIsisParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConstant(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ConstantContext constant() {
		ConstantContext _localctx = new ConstantContext(Context, State);
		EnterRule(_localctx, 70, RULE_constant);
		try {
			State = 374;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case CHARCONST:
				EnterOuterAlt(_localctx, 1);
				{
				State = 366;
				Match(CHARCONST);
				}
				break;
			case STRINGCONST:
				EnterOuterAlt(_localctx, 2);
				{
				State = 367;
				Match(STRINGCONST);
				}
				break;
			case BOOLCONST:
				EnterOuterAlt(_localctx, 3);
				{
				State = 368;
				Match(BOOLCONST);
				}
				break;
			case NUMBERCONST:
				EnterOuterAlt(_localctx, 4);
				{
				State = 369;
				Match(NUMBERCONST);
				}
				break;
			case LEFTBRACKET:
				EnterOuterAlt(_localctx, 5);
				{
				State = 370;
				Match(LEFTBRACKET);
				State = 371;
				constants();
				State = 372;
				Match(RIGHTBRACKET);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConstantsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ConstantListContext constantList() {
			return GetRuleContext<ConstantListContext>(0);
		}
		public ConstantsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_constants; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IIsisParserListener typedListener = listener as IIsisParserListener;
			if (typedListener != null) typedListener.EnterConstants(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IIsisParserListener typedListener = listener as IIsisParserListener;
			if (typedListener != null) typedListener.ExitConstants(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IIsisParserVisitor<TResult> typedVisitor = visitor as IIsisParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConstants(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ConstantsContext constants() {
		ConstantsContext _localctx = new ConstantsContext(Context, State);
		EnterRule(_localctx, 72, RULE_constants);
		try {
			State = 378;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case CHARCONST:
			case STRINGCONST:
			case NUMBERCONST:
			case BOOLCONST:
			case LEFTBRACKET:
				EnterOuterAlt(_localctx, 1);
				{
				State = 376;
				constantList(0);
				}
				break;
			case RIGHTBRACKET:
				EnterOuterAlt(_localctx, 2);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConstantListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ConstantContext constant() {
			return GetRuleContext<ConstantContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ConstantListContext constantList() {
			return GetRuleContext<ConstantListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA() { return GetToken(IsisParser.COMMA, 0); }
		public ConstantListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_constantList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IIsisParserListener typedListener = listener as IIsisParserListener;
			if (typedListener != null) typedListener.EnterConstantList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IIsisParserListener typedListener = listener as IIsisParserListener;
			if (typedListener != null) typedListener.ExitConstantList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IIsisParserVisitor<TResult> typedVisitor = visitor as IIsisParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConstantList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ConstantListContext constantList() {
		return constantList(0);
	}

	private ConstantListContext constantList(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		ConstantListContext _localctx = new ConstantListContext(Context, _parentState);
		ConstantListContext _prevctx = _localctx;
		int _startState = 74;
		EnterRecursionRule(_localctx, 74, RULE_constantList, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 381;
			constant();
			}
			Context.Stop = TokenStream.LT(-1);
			State = 388;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,27,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new ConstantListContext(_parentctx, _parentState);
					PushNewRecursionContext(_localctx, _startState, RULE_constantList);
					State = 383;
					if (!(Precpred(Context, 2))) throw new FailedPredicateException(this, "Precpred(Context, 2)");
					State = 384;
					Match(COMMA);
					State = 385;
					constant();
					}
					} 
				}
				State = 390;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,27,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 3: return declarationList_sempred((DeclarationListContext)_localctx, predIndex);
		case 11: return argumentsList_sempred((ArgumentsListContext)_localctx, predIndex);
		case 14: return instructionsList_sempred((InstructionsListContext)_localctx, predIndex);
		case 22: return boolExpression_sempred((BoolExpressionContext)_localctx, predIndex);
		case 23: return andExpression_sempred((AndExpressionContext)_localctx, predIndex);
		case 27: return sumExpression_sempred((SumExpressionContext)_localctx, predIndex);
		case 29: return multExpression_sempred((MultExpressionContext)_localctx, predIndex);
		case 37: return constantList_sempred((ConstantListContext)_localctx, predIndex);
		}
		return true;
	}
	private bool declarationList_sempred(DeclarationListContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(Context, 2);
		}
		return true;
	}
	private bool argumentsList_sempred(ArgumentsListContext _localctx, int predIndex) {
		switch (predIndex) {
		case 1: return Precpred(Context, 2);
		}
		return true;
	}
	private bool instructionsList_sempred(InstructionsListContext _localctx, int predIndex) {
		switch (predIndex) {
		case 2: return Precpred(Context, 2);
		}
		return true;
	}
	private bool boolExpression_sempred(BoolExpressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 3: return Precpred(Context, 2);
		}
		return true;
	}
	private bool andExpression_sempred(AndExpressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 4: return Precpred(Context, 2);
		}
		return true;
	}
	private bool sumExpression_sempred(SumExpressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 5: return Precpred(Context, 2);
		}
		return true;
	}
	private bool multExpression_sempred(MultExpressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 6: return Precpred(Context, 2);
		}
		return true;
	}
	private bool constantList_sempred(ConstantListContext _localctx, int predIndex) {
		switch (predIndex) {
		case 7: return Precpred(Context, 2);
		}
		return true;
	}

	private static int[] _serializedATN = {
		4,1,57,392,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,6,2,7,
		7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,7,14,
		2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,7,21,
		2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,7,27,2,28,7,28,
		2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,7,33,2,34,7,34,2,35,7,35,
		2,36,7,36,2,37,7,37,1,0,1,0,1,0,1,0,1,0,1,0,1,0,3,0,84,8,0,1,1,1,1,3,1,
		88,8,1,1,2,1,2,1,2,1,2,1,3,1,3,1,3,1,3,1,3,5,3,99,8,3,10,3,12,3,102,9,
		3,1,4,1,4,1,4,1,4,3,4,108,8,4,1,5,1,5,1,5,1,6,1,6,1,6,1,6,3,6,117,8,6,
		1,7,1,7,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,9,1,9,3,9,132,8,9,1,10,1,
		10,3,10,136,8,10,1,11,1,11,1,11,1,11,1,11,1,11,5,11,144,8,11,10,11,12,
		11,147,9,11,1,12,1,12,1,12,1,13,1,13,3,13,154,8,13,1,14,1,14,1,14,1,14,
		1,14,5,14,161,8,14,10,14,12,14,164,9,14,1,15,1,15,1,15,1,15,1,15,1,15,
		1,15,1,15,3,15,174,8,15,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,
		16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,3,16,196,8,16,1,17,
		1,17,1,17,1,17,1,17,1,17,1,17,1,17,1,17,1,17,1,17,1,17,1,17,1,17,1,17,
		1,17,1,17,1,17,1,17,1,17,1,17,1,17,1,17,1,17,1,17,1,17,1,17,1,17,1,17,
		3,17,227,8,17,1,18,1,18,1,18,1,18,1,18,1,18,3,18,235,8,18,1,19,1,19,1,
		19,1,19,3,19,241,8,19,1,20,1,20,1,20,1,20,1,20,1,20,1,21,1,21,1,21,1,21,
		1,21,1,21,1,21,1,21,1,21,1,21,1,21,1,21,1,21,1,21,1,21,1,21,1,21,1,21,
		1,21,1,21,1,21,1,21,1,21,1,21,1,21,1,21,1,21,1,21,1,21,1,21,1,21,1,21,
		1,21,3,21,282,8,21,1,22,1,22,1,22,1,22,1,22,1,22,5,22,290,8,22,10,22,12,
		22,293,9,22,1,23,1,23,1,23,1,23,1,23,1,23,5,23,301,8,23,10,23,12,23,304,
		9,23,1,24,1,24,1,24,3,24,309,8,24,1,25,1,25,1,25,1,25,1,25,3,25,316,8,
		25,1,26,1,26,1,27,1,27,1,27,1,27,1,27,1,27,1,27,5,27,327,8,27,10,27,12,
		27,330,9,27,1,28,1,28,1,29,1,29,1,29,1,29,1,29,1,29,1,29,5,29,341,8,29,
		10,29,12,29,344,9,29,1,30,1,30,1,31,1,31,1,31,1,31,3,31,352,8,31,1,32,
		1,32,1,33,1,33,3,33,358,8,33,1,34,1,34,1,34,1,34,1,34,3,34,365,8,34,1,
		35,1,35,1,35,1,35,1,35,1,35,1,35,1,35,3,35,375,8,35,1,36,1,36,3,36,379,
		8,36,1,37,1,37,1,37,1,37,1,37,1,37,5,37,387,8,37,10,37,12,37,390,9,37,
		1,37,0,8,6,22,28,44,46,54,58,74,38,0,2,4,6,8,10,12,14,16,18,20,22,24,26,
		28,30,32,34,36,38,40,42,44,46,48,50,52,54,56,58,60,62,64,66,68,70,72,74,
		0,4,2,0,8,9,11,12,2,0,45,48,52,53,1,0,39,40,1,0,42,44,398,0,83,1,0,0,0,
		2,87,1,0,0,0,4,89,1,0,0,0,6,93,1,0,0,0,8,107,1,0,0,0,10,109,1,0,0,0,12,
		116,1,0,0,0,14,118,1,0,0,0,16,120,1,0,0,0,18,131,1,0,0,0,20,135,1,0,0,
		0,22,137,1,0,0,0,24,148,1,0,0,0,26,153,1,0,0,0,28,155,1,0,0,0,30,173,1,
		0,0,0,32,195,1,0,0,0,34,226,1,0,0,0,36,234,1,0,0,0,38,240,1,0,0,0,40,242,
		1,0,0,0,42,281,1,0,0,0,44,283,1,0,0,0,46,294,1,0,0,0,48,308,1,0,0,0,50,
		315,1,0,0,0,52,317,1,0,0,0,54,319,1,0,0,0,56,331,1,0,0,0,58,333,1,0,0,
		0,60,345,1,0,0,0,62,351,1,0,0,0,64,353,1,0,0,0,66,357,1,0,0,0,68,364,1,
		0,0,0,70,374,1,0,0,0,72,378,1,0,0,0,74,380,1,0,0,0,76,77,3,2,1,0,77,78,
		3,4,2,0,78,79,5,0,0,1,79,84,1,0,0,0,80,81,3,2,1,0,81,82,5,0,0,1,82,84,
		1,0,0,0,83,76,1,0,0,0,83,80,1,0,0,0,84,1,1,0,0,0,85,88,3,6,3,0,86,88,1,
		0,0,0,87,85,1,0,0,0,87,86,1,0,0,0,88,3,1,0,0,0,89,90,5,4,0,0,90,91,3,26,
		13,0,91,92,5,5,0,0,92,5,1,0,0,0,93,94,6,3,-1,0,94,95,3,8,4,0,95,100,1,
		0,0,0,96,97,10,2,0,0,97,99,3,8,4,0,98,96,1,0,0,0,99,102,1,0,0,0,100,98,
		1,0,0,0,100,101,1,0,0,0,101,7,1,0,0,0,102,100,1,0,0,0,103,104,3,10,5,0,
		104,105,5,6,0,0,105,108,1,0,0,0,106,108,3,16,8,0,107,103,1,0,0,0,107,106,
		1,0,0,0,108,9,1,0,0,0,109,110,3,14,7,0,110,111,3,12,6,0,111,11,1,0,0,0,
		112,117,5,54,0,0,113,114,5,54,0,0,114,115,5,26,0,0,115,117,5,27,0,0,116,
		112,1,0,0,0,116,113,1,0,0,0,117,13,1,0,0,0,118,119,7,0,0,0,119,15,1,0,
		0,0,120,121,3,18,9,0,121,122,5,54,0,0,122,123,5,24,0,0,123,124,3,20,10,
		0,124,125,5,25,0,0,125,126,5,28,0,0,126,127,3,28,14,0,127,128,5,29,0,0,
		128,17,1,0,0,0,129,132,3,14,7,0,130,132,5,7,0,0,131,129,1,0,0,0,131,130,
		1,0,0,0,132,19,1,0,0,0,133,136,3,22,11,0,134,136,1,0,0,0,135,133,1,0,0,
		0,135,134,1,0,0,0,136,21,1,0,0,0,137,138,6,11,-1,0,138,139,3,24,12,0,139,
		145,1,0,0,0,140,141,10,2,0,0,141,142,5,32,0,0,142,144,3,24,12,0,143,140,
		1,0,0,0,144,147,1,0,0,0,145,143,1,0,0,0,145,146,1,0,0,0,146,23,1,0,0,0,
		147,145,1,0,0,0,148,149,3,14,7,0,149,150,3,12,6,0,150,25,1,0,0,0,151,154,
		3,28,14,0,152,154,1,0,0,0,153,151,1,0,0,0,153,152,1,0,0,0,154,27,1,0,0,
		0,155,156,6,14,-1,0,156,157,3,30,15,0,157,162,1,0,0,0,158,159,10,2,0,0,
		159,161,3,30,15,0,160,158,1,0,0,0,161,164,1,0,0,0,162,160,1,0,0,0,162,
		163,1,0,0,0,163,29,1,0,0,0,164,162,1,0,0,0,165,166,3,42,21,0,166,167,5,
		6,0,0,167,174,1,0,0,0,168,174,3,32,16,0,169,174,3,34,17,0,170,174,3,36,
		18,0,171,174,3,38,19,0,172,174,3,40,20,0,173,165,1,0,0,0,173,168,1,0,0,
		0,173,169,1,0,0,0,173,170,1,0,0,0,173,171,1,0,0,0,173,172,1,0,0,0,174,
		31,1,0,0,0,175,176,5,16,0,0,176,177,5,24,0,0,177,178,3,44,22,0,178,179,
		5,25,0,0,179,180,5,28,0,0,180,181,3,26,13,0,181,182,5,29,0,0,182,196,1,
		0,0,0,183,184,5,16,0,0,184,185,5,24,0,0,185,186,3,44,22,0,186,187,5,25,
		0,0,187,188,5,28,0,0,188,189,3,26,13,0,189,190,5,29,0,0,190,191,5,17,0,
		0,191,192,5,28,0,0,192,193,3,26,13,0,193,194,5,29,0,0,194,196,1,0,0,0,
		195,175,1,0,0,0,195,183,1,0,0,0,196,33,1,0,0,0,197,198,5,15,0,0,198,199,
		5,24,0,0,199,200,3,42,21,0,200,201,5,6,0,0,201,202,3,44,22,0,202,203,5,
		6,0,0,203,204,3,42,21,0,204,205,5,25,0,0,205,206,5,28,0,0,206,207,3,26,
		13,0,207,208,5,29,0,0,208,227,1,0,0,0,209,210,5,13,0,0,210,211,5,24,0,
		0,211,212,3,44,22,0,212,213,5,25,0,0,213,214,5,28,0,0,214,215,3,26,13,
		0,215,216,5,29,0,0,216,227,1,0,0,0,217,218,5,14,0,0,218,219,5,28,0,0,219,
		220,3,26,13,0,220,221,5,29,0,0,221,222,5,13,0,0,222,223,5,24,0,0,223,224,
		3,44,22,0,224,225,5,25,0,0,225,227,1,0,0,0,226,197,1,0,0,0,226,209,1,0,
		0,0,226,217,1,0,0,0,227,35,1,0,0,0,228,229,5,20,0,0,229,235,5,6,0,0,230,
		231,5,20,0,0,231,232,3,42,21,0,232,233,5,6,0,0,233,235,1,0,0,0,234,228,
		1,0,0,0,234,230,1,0,0,0,235,37,1,0,0,0,236,237,5,18,0,0,237,241,5,6,0,
		0,238,239,5,19,0,0,239,241,5,6,0,0,240,236,1,0,0,0,240,238,1,0,0,0,241,
		39,1,0,0,0,242,243,5,21,0,0,243,244,5,24,0,0,244,245,3,54,27,0,245,246,
		5,25,0,0,246,247,5,6,0,0,247,41,1,0,0,0,248,249,3,68,34,0,249,250,5,41,
		0,0,250,251,3,42,21,0,251,282,1,0,0,0,252,253,3,68,34,0,253,254,5,35,0,
		0,254,255,3,42,21,0,255,282,1,0,0,0,256,257,3,68,34,0,257,258,5,36,0,0,
		258,259,3,42,21,0,259,282,1,0,0,0,260,261,3,68,34,0,261,262,5,37,0,0,262,
		263,3,42,21,0,263,282,1,0,0,0,264,265,3,68,34,0,265,266,5,38,0,0,266,267,
		3,42,21,0,267,282,1,0,0,0,268,269,3,68,34,0,269,270,5,33,0,0,270,282,1,
		0,0,0,271,272,3,68,34,0,272,273,5,34,0,0,273,282,1,0,0,0,274,282,3,44,
		22,0,275,282,3,54,27,0,276,282,3,10,5,0,277,278,3,10,5,0,278,279,5,41,
		0,0,279,280,3,42,21,0,280,282,1,0,0,0,281,248,1,0,0,0,281,252,1,0,0,0,
		281,256,1,0,0,0,281,260,1,0,0,0,281,264,1,0,0,0,281,268,1,0,0,0,281,271,
		1,0,0,0,281,274,1,0,0,0,281,275,1,0,0,0,281,276,1,0,0,0,281,277,1,0,0,
		0,282,43,1,0,0,0,283,284,6,22,-1,0,284,285,3,46,23,0,285,291,1,0,0,0,286,
		287,10,2,0,0,287,288,5,50,0,0,288,290,3,46,23,0,289,286,1,0,0,0,290,293,
		1,0,0,0,291,289,1,0,0,0,291,292,1,0,0,0,292,45,1,0,0,0,293,291,1,0,0,0,
		294,295,6,23,-1,0,295,296,3,48,24,0,296,302,1,0,0,0,297,298,10,2,0,0,298,
		299,5,49,0,0,299,301,3,48,24,0,300,297,1,0,0,0,301,304,1,0,0,0,302,300,
		1,0,0,0,302,303,1,0,0,0,303,47,1,0,0,0,304,302,1,0,0,0,305,306,5,51,0,
		0,306,309,3,48,24,0,307,309,3,50,25,0,308,305,1,0,0,0,308,307,1,0,0,0,
		309,49,1,0,0,0,310,311,3,54,27,0,311,312,3,52,26,0,312,313,3,54,27,0,313,
		316,1,0,0,0,314,316,5,23,0,0,315,310,1,0,0,0,315,314,1,0,0,0,316,51,1,
		0,0,0,317,318,7,1,0,0,318,53,1,0,0,0,319,320,6,27,-1,0,320,321,3,58,29,
		0,321,328,1,0,0,0,322,323,10,2,0,0,323,324,3,56,28,0,324,325,3,58,29,0,
		325,327,1,0,0,0,326,322,1,0,0,0,327,330,1,0,0,0,328,326,1,0,0,0,328,329,
		1,0,0,0,329,55,1,0,0,0,330,328,1,0,0,0,331,332,7,2,0,0,332,57,1,0,0,0,
		333,334,6,29,-1,0,334,335,3,62,31,0,335,342,1,0,0,0,336,337,10,2,0,0,337,
		338,3,60,30,0,338,339,3,62,31,0,339,341,1,0,0,0,340,336,1,0,0,0,341,344,
		1,0,0,0,342,340,1,0,0,0,342,343,1,0,0,0,343,59,1,0,0,0,344,342,1,0,0,0,
		345,346,7,3,0,0,346,61,1,0,0,0,347,348,3,64,32,0,348,349,3,62,31,0,349,
		352,1,0,0,0,350,352,3,66,33,0,351,347,1,0,0,0,351,350,1,0,0,0,352,63,1,
		0,0,0,353,354,7,2,0,0,354,65,1,0,0,0,355,358,3,68,34,0,356,358,3,70,35,
		0,357,355,1,0,0,0,357,356,1,0,0,0,358,67,1,0,0,0,359,365,5,54,0,0,360,
		361,5,54,0,0,361,362,5,26,0,0,362,363,5,22,0,0,363,365,5,27,0,0,364,359,
		1,0,0,0,364,360,1,0,0,0,365,69,1,0,0,0,366,375,5,2,0,0,367,375,5,3,0,0,
		368,375,5,23,0,0,369,375,5,22,0,0,370,371,5,26,0,0,371,372,3,72,36,0,372,
		373,5,27,0,0,373,375,1,0,0,0,374,366,1,0,0,0,374,367,1,0,0,0,374,368,1,
		0,0,0,374,369,1,0,0,0,374,370,1,0,0,0,375,71,1,0,0,0,376,379,3,74,37,0,
		377,379,1,0,0,0,378,376,1,0,0,0,378,377,1,0,0,0,379,73,1,0,0,0,380,381,
		6,37,-1,0,381,382,3,70,35,0,382,388,1,0,0,0,383,384,10,2,0,0,384,385,5,
		32,0,0,385,387,3,70,35,0,386,383,1,0,0,0,387,390,1,0,0,0,388,386,1,0,0,
		0,388,389,1,0,0,0,389,75,1,0,0,0,390,388,1,0,0,0,28,83,87,100,107,116,
		131,135,145,153,162,173,195,226,234,240,281,291,302,308,315,328,342,351,
		357,364,374,378,388
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
