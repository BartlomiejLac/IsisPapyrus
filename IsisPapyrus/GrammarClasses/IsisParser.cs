//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.10.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from C:/Users/bartt/RiderProjects/IsisPapyrus/IsisPapyrus/Grammar\IsisParser.g4 by ANTLR 4.10.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.10.1")]
[System.CLSCompliant(false)]
public partial class IsisParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		LINECOMMENT=1, CHARCONST=2, STRINGCONST=3, PROGRAMSTART=4, PROGRAMEND=5, 
		INSTRUCTIONEND=6, VOID=7, CHAR=8, INT=9, BOOL=10, FRACTIONAL=11, STRING=12, 
		WHILE=13, DO=14, FOR=15, IF=16, ELSE=17, BREAK=18, CONTINUE=19, RETURN=20, 
		THOUSANDSYMBOL=21, HUNDREDSYMBOL=22, TENSYMBOL=23, UNITSYMBOL=24, ZERO=25, 
		FRACTIONSYMBOL=26, TENTHOUSANDSYMBOL=27, HUNDREDTHOUSANDSYMBOL=28, MILLIONSYMBOL=29, 
		TRUE=30, FALSE=31, LEFTPAREN=32, RIGHTPAREN=33, LEFTBRACKET=34, RIGHTBRACKET=35, 
		LEFTBRACE=36, RIGHTBRACE=37, SINGLEQUOTE=38, DOUBLEQUOTE=39, COMMA=40, 
		INCREMENT=41, DECREMENT=42, INCREMENTBY=43, DECREMENTBY=44, MULTIPLYBY=45, 
		DIVIDEBY=46, PLUS=47, MINUS=48, ASSIGN=49, MULTSYMBOL=50, DIVSYMBOL=51, 
		MODSYMBOL=52, GREATEREQUAL=53, LESSEREQUAL=54, NOTEQUALS=55, EQUALS=56, 
		AND=57, OR=58, NOT=59, GREATER=60, LESSER=61, IDENTIFIER=62, WHITESPACE=63, 
		NEWLINE=64;
	public const int
		RULE_program = 0, RULE_mainFunction = 1, RULE_declarationList = 2, RULE_declaration = 3, 
		RULE_declarationVariable = 4, RULE_variableName = 5, RULE_type = 6, RULE_declarationFunc = 7, 
		RULE_functionType = 8, RULE_arguments = 9, RULE_argumentsList = 10, RULE_argument = 11, 
		RULE_instructions = 12, RULE_instructionsList = 13, RULE_instruction = 14, 
		RULE_instructionIf = 15, RULE_instructionLoop = 16, RULE_instructionReturn = 17, 
		RULE_instructionBreak = 18, RULE_expression = 19, RULE_boolExpression = 20, 
		RULE_andExpression = 21, RULE_notExpression = 22, RULE_compareExpression = 23, 
		RULE_compareOperator = 24, RULE_sumExpression = 25, RULE_sumOperator = 26, 
		RULE_multExpression = 27, RULE_multOperator = 28, RULE_unaryExpression = 29, 
		RULE_unaryOperator = 30, RULE_factor = 31, RULE_variable = 32, RULE_constant = 33, 
		RULE_constants = 34, RULE_constantList = 35, RULE_rawNumber = 36, RULE_fraction = 37, 
		RULE_numberConstant = 38, RULE_fractionList = 39, RULE_charConstant = 40, 
		RULE_stringConstant = 41, RULE_boolConstant = 42;
	public static readonly string[] ruleNames = {
		"program", "mainFunction", "declarationList", "declaration", "declarationVariable", 
		"variableName", "type", "declarationFunc", "functionType", "arguments", 
		"argumentsList", "argument", "instructions", "instructionsList", "instruction", 
		"instructionIf", "instructionLoop", "instructionReturn", "instructionBreak", 
		"expression", "boolExpression", "andExpression", "notExpression", "compareExpression", 
		"compareOperator", "sumExpression", "sumOperator", "multExpression", "multOperator", 
		"unaryExpression", "unaryOperator", "factor", "variable", "constant", 
		"constants", "constantList", "rawNumber", "fraction", "numberConstant", 
		"fractionList", "charConstant", "stringConstant", "boolConstant"
	};

	private static readonly string[] _LiteralNames = {
		null, null, null, null, "'\\U00013080'", "'\\U0001314A'", "'\\U000132F9'", 
		"'\\U0001316F'", "'\\U000130DC'", "'\\U000130D5'", "'\\U000130D2'", "'\\U000130F2'", 
		"'\\U000130EF'", "'\\U00013133'", "'\\U00013136'", "'\\U00013138'", "'\\U00013038'", 
		"'\\U000131A3'", "'\\U000130BF'", "'\\U00013216'", "'\\U000130C2'", null, 
		null, null, null, "'\\U00013124'", "'\\U0001308B'", "'\\U000130AD'", "'\\U00013190'", 
		"'\\U00013068'", "'\\U0001303E'", "'\\U0001303F'", "'\\U00013023'", "'\\U00013022'", 
		"'\\U00013024'", "'\\U00013025'", "'\\U00013020'", "'\\U00013021'", "'\\U000132FE'", 
		"'\\U0001339B'", "'\\U000133F0'", null, null, null, null, null, null, 
		"'\\U000130BD'", "'\\U000130BB'", "'\\U0001335D'", "'\\U00013188'", "'\\U000133F5'", 
		"'\\U000132AD'", null, null, null, "'\\U0001339A'", "'\\U00013093'", "'\\U00013098'", 
		"'\\U0001309C'", "'\\U00013287'", "'\\U00013286'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "LINECOMMENT", "CHARCONST", "STRINGCONST", "PROGRAMSTART", "PROGRAMEND", 
		"INSTRUCTIONEND", "VOID", "CHAR", "INT", "BOOL", "FRACTIONAL", "STRING", 
		"WHILE", "DO", "FOR", "IF", "ELSE", "BREAK", "CONTINUE", "RETURN", "THOUSANDSYMBOL", 
		"HUNDREDSYMBOL", "TENSYMBOL", "UNITSYMBOL", "ZERO", "FRACTIONSYMBOL", 
		"TENTHOUSANDSYMBOL", "HUNDREDTHOUSANDSYMBOL", "MILLIONSYMBOL", "TRUE", 
		"FALSE", "LEFTPAREN", "RIGHTPAREN", "LEFTBRACKET", "RIGHTBRACKET", "LEFTBRACE", 
		"RIGHTBRACE", "SINGLEQUOTE", "DOUBLEQUOTE", "COMMA", "INCREMENT", "DECREMENT", 
		"INCREMENTBY", "DECREMENTBY", "MULTIPLYBY", "DIVIDEBY", "PLUS", "MINUS", 
		"ASSIGN", "MULTSYMBOL", "DIVSYMBOL", "MODSYMBOL", "GREATEREQUAL", "LESSEREQUAL", 
		"NOTEQUALS", "EQUALS", "AND", "OR", "NOT", "GREATER", "LESSER", "IDENTIFIER", 
		"WHITESPACE", "NEWLINE"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "IsisParser.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static IsisParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public IsisParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public IsisParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class ProgramContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public DeclarationListContext declarationList() {
			return GetRuleContext<DeclarationListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public MainFunctionContext mainFunction() {
			return GetRuleContext<MainFunctionContext>(0);
		}
		public ProgramContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_program; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IIsisParserListener typedListener = listener as IIsisParserListener;
			if (typedListener != null) typedListener.EnterProgram(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IIsisParserListener typedListener = listener as IIsisParserListener;
			if (typedListener != null) typedListener.ExitProgram(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IIsisParserVisitor<TResult> typedVisitor = visitor as IIsisParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitProgram(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ProgramContext program() {
		ProgramContext _localctx = new ProgramContext(Context, State);
		EnterRule(_localctx, 0, RULE_program);
		try {
			State = 90;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case VOID:
			case CHAR:
			case INT:
			case FRACTIONAL:
			case STRING:
				EnterOuterAlt(_localctx, 1);
				{
				State = 86;
				declarationList(0);
				State = 87;
				mainFunction();
				}
				break;
			case PROGRAMSTART:
				EnterOuterAlt(_localctx, 2);
				{
				State = 89;
				mainFunction();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MainFunctionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PROGRAMSTART() { return GetToken(IsisParser.PROGRAMSTART, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public InstructionsContext instructions() {
			return GetRuleContext<InstructionsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PROGRAMEND() { return GetToken(IsisParser.PROGRAMEND, 0); }
		public MainFunctionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_mainFunction; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IIsisParserListener typedListener = listener as IIsisParserListener;
			if (typedListener != null) typedListener.EnterMainFunction(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IIsisParserListener typedListener = listener as IIsisParserListener;
			if (typedListener != null) typedListener.ExitMainFunction(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IIsisParserVisitor<TResult> typedVisitor = visitor as IIsisParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMainFunction(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MainFunctionContext mainFunction() {
		MainFunctionContext _localctx = new MainFunctionContext(Context, State);
		EnterRule(_localctx, 2, RULE_mainFunction);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 92;
			Match(PROGRAMSTART);
			State = 93;
			instructions();
			State = 94;
			Match(PROGRAMEND);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DeclarationListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public DeclarationContext declaration() {
			return GetRuleContext<DeclarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DeclarationListContext declarationList() {
			return GetRuleContext<DeclarationListContext>(0);
		}
		public DeclarationListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_declarationList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IIsisParserListener typedListener = listener as IIsisParserListener;
			if (typedListener != null) typedListener.EnterDeclarationList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IIsisParserListener typedListener = listener as IIsisParserListener;
			if (typedListener != null) typedListener.ExitDeclarationList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IIsisParserVisitor<TResult> typedVisitor = visitor as IIsisParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDeclarationList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DeclarationListContext declarationList() {
		return declarationList(0);
	}

	private DeclarationListContext declarationList(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		DeclarationListContext _localctx = new DeclarationListContext(Context, _parentState);
		DeclarationListContext _prevctx = _localctx;
		int _startState = 4;
		EnterRecursionRule(_localctx, 4, RULE_declarationList, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 97;
			declaration();
			}
			Context.Stop = TokenStream.LT(-1);
			State = 103;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,1,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new DeclarationListContext(_parentctx, _parentState);
					PushNewRecursionContext(_localctx, _startState, RULE_declarationList);
					State = 99;
					if (!(Precpred(Context, 2))) throw new FailedPredicateException(this, "Precpred(Context, 2)");
					State = 100;
					declaration();
					}
					} 
				}
				State = 105;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,1,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class DeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public DeclarationVariableContext declarationVariable() {
			return GetRuleContext<DeclarationVariableContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INSTRUCTIONEND() { return GetToken(IsisParser.INSTRUCTIONEND, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public DeclarationFuncContext declarationFunc() {
			return GetRuleContext<DeclarationFuncContext>(0);
		}
		public DeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_declaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IIsisParserListener typedListener = listener as IIsisParserListener;
			if (typedListener != null) typedListener.EnterDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IIsisParserListener typedListener = listener as IIsisParserListener;
			if (typedListener != null) typedListener.ExitDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IIsisParserVisitor<TResult> typedVisitor = visitor as IIsisParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DeclarationContext declaration() {
		DeclarationContext _localctx = new DeclarationContext(Context, State);
		EnterRule(_localctx, 6, RULE_declaration);
		try {
			State = 110;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,2,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 106;
				declarationVariable();
				State = 107;
				Match(INSTRUCTIONEND);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 109;
				declarationFunc();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DeclarationVariableContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public VariableNameContext variableName() {
			return GetRuleContext<VariableNameContext>(0);
		}
		public DeclarationVariableContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_declarationVariable; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IIsisParserListener typedListener = listener as IIsisParserListener;
			if (typedListener != null) typedListener.EnterDeclarationVariable(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IIsisParserListener typedListener = listener as IIsisParserListener;
			if (typedListener != null) typedListener.ExitDeclarationVariable(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IIsisParserVisitor<TResult> typedVisitor = visitor as IIsisParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDeclarationVariable(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DeclarationVariableContext declarationVariable() {
		DeclarationVariableContext _localctx = new DeclarationVariableContext(Context, State);
		EnterRule(_localctx, 8, RULE_declarationVariable);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 112;
			type();
			State = 113;
			variableName();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VariableNameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(IsisParser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEFTBRACKET() { return GetToken(IsisParser.LEFTBRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RIGHTBRACKET() { return GetToken(IsisParser.RIGHTBRACKET, 0); }
		public VariableNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_variableName; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IIsisParserListener typedListener = listener as IIsisParserListener;
			if (typedListener != null) typedListener.EnterVariableName(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IIsisParserListener typedListener = listener as IIsisParserListener;
			if (typedListener != null) typedListener.ExitVariableName(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IIsisParserVisitor<TResult> typedVisitor = visitor as IIsisParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVariableName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VariableNameContext variableName() {
		VariableNameContext _localctx = new VariableNameContext(Context, State);
		EnterRule(_localctx, 10, RULE_variableName);
		try {
			State = 119;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,3,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 115;
				Match(IDENTIFIER);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 116;
				Match(IDENTIFIER);
				State = 117;
				Match(LEFTBRACKET);
				State = 118;
				Match(RIGHTBRACKET);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INT() { return GetToken(IsisParser.INT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FRACTIONAL() { return GetToken(IsisParser.FRACTIONAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CHAR() { return GetToken(IsisParser.CHAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING() { return GetToken(IsisParser.STRING, 0); }
		public TypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_type; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IIsisParserListener typedListener = listener as IIsisParserListener;
			if (typedListener != null) typedListener.EnterType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IIsisParserListener typedListener = listener as IIsisParserListener;
			if (typedListener != null) typedListener.ExitType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IIsisParserVisitor<TResult> typedVisitor = visitor as IIsisParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeContext type() {
		TypeContext _localctx = new TypeContext(Context, State);
		EnterRule(_localctx, 12, RULE_type);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 121;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << CHAR) | (1L << INT) | (1L << FRACTIONAL) | (1L << STRING))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DeclarationFuncContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public FunctionTypeContext functionType() {
			return GetRuleContext<FunctionTypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(IsisParser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEFTPAREN() { return GetToken(IsisParser.LEFTPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ArgumentsContext arguments() {
			return GetRuleContext<ArgumentsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RIGHTPAREN() { return GetToken(IsisParser.RIGHTPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEFTBRACE() { return GetToken(IsisParser.LEFTBRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public InstructionsListContext instructionsList() {
			return GetRuleContext<InstructionsListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RIGHTBRACE() { return GetToken(IsisParser.RIGHTBRACE, 0); }
		public DeclarationFuncContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_declarationFunc; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IIsisParserListener typedListener = listener as IIsisParserListener;
			if (typedListener != null) typedListener.EnterDeclarationFunc(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IIsisParserListener typedListener = listener as IIsisParserListener;
			if (typedListener != null) typedListener.ExitDeclarationFunc(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IIsisParserVisitor<TResult> typedVisitor = visitor as IIsisParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDeclarationFunc(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DeclarationFuncContext declarationFunc() {
		DeclarationFuncContext _localctx = new DeclarationFuncContext(Context, State);
		EnterRule(_localctx, 14, RULE_declarationFunc);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 123;
			functionType();
			State = 124;
			Match(IDENTIFIER);
			State = 125;
			Match(LEFTPAREN);
			State = 126;
			arguments();
			State = 127;
			Match(RIGHTPAREN);
			State = 128;
			Match(LEFTBRACE);
			State = 129;
			instructionsList(0);
			State = 130;
			Match(RIGHTBRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionTypeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VOID() { return GetToken(IsisParser.VOID, 0); }
		public FunctionTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionType; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IIsisParserListener typedListener = listener as IIsisParserListener;
			if (typedListener != null) typedListener.EnterFunctionType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IIsisParserListener typedListener = listener as IIsisParserListener;
			if (typedListener != null) typedListener.ExitFunctionType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IIsisParserVisitor<TResult> typedVisitor = visitor as IIsisParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctionType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunctionTypeContext functionType() {
		FunctionTypeContext _localctx = new FunctionTypeContext(Context, State);
		EnterRule(_localctx, 16, RULE_functionType);
		try {
			State = 134;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case CHAR:
			case INT:
			case FRACTIONAL:
			case STRING:
				EnterOuterAlt(_localctx, 1);
				{
				State = 132;
				type();
				}
				break;
			case VOID:
				EnterOuterAlt(_localctx, 2);
				{
				State = 133;
				Match(VOID);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArgumentsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ArgumentsListContext argumentsList() {
			return GetRuleContext<ArgumentsListContext>(0);
		}
		public ArgumentsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_arguments; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IIsisParserListener typedListener = listener as IIsisParserListener;
			if (typedListener != null) typedListener.EnterArguments(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IIsisParserListener typedListener = listener as IIsisParserListener;
			if (typedListener != null) typedListener.ExitArguments(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IIsisParserVisitor<TResult> typedVisitor = visitor as IIsisParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArguments(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArgumentsContext arguments() {
		ArgumentsContext _localctx = new ArgumentsContext(Context, State);
		EnterRule(_localctx, 18, RULE_arguments);
		try {
			State = 138;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case CHAR:
			case INT:
			case FRACTIONAL:
			case STRING:
				EnterOuterAlt(_localctx, 1);
				{
				State = 136;
				argumentsList(0);
				}
				break;
			case RIGHTPAREN:
				EnterOuterAlt(_localctx, 2);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArgumentsListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ArgumentContext argument() {
			return GetRuleContext<ArgumentContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ArgumentsListContext argumentsList() {
			return GetRuleContext<ArgumentsListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA() { return GetToken(IsisParser.COMMA, 0); }
		public ArgumentsListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_argumentsList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IIsisParserListener typedListener = listener as IIsisParserListener;
			if (typedListener != null) typedListener.EnterArgumentsList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IIsisParserListener typedListener = listener as IIsisParserListener;
			if (typedListener != null) typedListener.ExitArgumentsList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IIsisParserVisitor<TResult> typedVisitor = visitor as IIsisParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArgumentsList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArgumentsListContext argumentsList() {
		return argumentsList(0);
	}

	private ArgumentsListContext argumentsList(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		ArgumentsListContext _localctx = new ArgumentsListContext(Context, _parentState);
		ArgumentsListContext _prevctx = _localctx;
		int _startState = 20;
		EnterRecursionRule(_localctx, 20, RULE_argumentsList, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 141;
			argument();
			}
			Context.Stop = TokenStream.LT(-1);
			State = 148;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,6,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new ArgumentsListContext(_parentctx, _parentState);
					PushNewRecursionContext(_localctx, _startState, RULE_argumentsList);
					State = 143;
					if (!(Precpred(Context, 2))) throw new FailedPredicateException(this, "Precpred(Context, 2)");
					State = 144;
					Match(COMMA);
					State = 145;
					argument();
					}
					} 
				}
				State = 150;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,6,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class ArgumentContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public VariableNameContext variableName() {
			return GetRuleContext<VariableNameContext>(0);
		}
		public ArgumentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_argument; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IIsisParserListener typedListener = listener as IIsisParserListener;
			if (typedListener != null) typedListener.EnterArgument(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IIsisParserListener typedListener = listener as IIsisParserListener;
			if (typedListener != null) typedListener.ExitArgument(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IIsisParserVisitor<TResult> typedVisitor = visitor as IIsisParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArgument(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArgumentContext argument() {
		ArgumentContext _localctx = new ArgumentContext(Context, State);
		EnterRule(_localctx, 22, RULE_argument);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 151;
			type();
			State = 152;
			variableName();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InstructionsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public InstructionsListContext instructionsList() {
			return GetRuleContext<InstructionsListContext>(0);
		}
		public InstructionsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_instructions; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IIsisParserListener typedListener = listener as IIsisParserListener;
			if (typedListener != null) typedListener.EnterInstructions(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IIsisParserListener typedListener = listener as IIsisParserListener;
			if (typedListener != null) typedListener.ExitInstructions(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IIsisParserVisitor<TResult> typedVisitor = visitor as IIsisParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInstructions(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public InstructionsContext instructions() {
		InstructionsContext _localctx = new InstructionsContext(Context, State);
		EnterRule(_localctx, 24, RULE_instructions);
		try {
			State = 156;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case CHARCONST:
			case STRINGCONST:
			case CHAR:
			case INT:
			case FRACTIONAL:
			case STRING:
			case WHILE:
			case DO:
			case FOR:
			case IF:
			case BREAK:
			case RETURN:
			case THOUSANDSYMBOL:
			case HUNDREDSYMBOL:
			case TENSYMBOL:
			case UNITSYMBOL:
			case ZERO:
			case TENTHOUSANDSYMBOL:
			case HUNDREDTHOUSANDSYMBOL:
			case MILLIONSYMBOL:
			case TRUE:
			case FALSE:
			case LEFTBRACKET:
			case PLUS:
			case MINUS:
			case NOT:
			case IDENTIFIER:
				EnterOuterAlt(_localctx, 1);
				{
				State = 154;
				instructionsList(0);
				}
				break;
			case PROGRAMEND:
			case RIGHTBRACE:
				EnterOuterAlt(_localctx, 2);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InstructionsListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public InstructionContext instruction() {
			return GetRuleContext<InstructionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public InstructionsListContext instructionsList() {
			return GetRuleContext<InstructionsListContext>(0);
		}
		public InstructionsListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_instructionsList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IIsisParserListener typedListener = listener as IIsisParserListener;
			if (typedListener != null) typedListener.EnterInstructionsList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IIsisParserListener typedListener = listener as IIsisParserListener;
			if (typedListener != null) typedListener.ExitInstructionsList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IIsisParserVisitor<TResult> typedVisitor = visitor as IIsisParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInstructionsList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public InstructionsListContext instructionsList() {
		return instructionsList(0);
	}

	private InstructionsListContext instructionsList(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		InstructionsListContext _localctx = new InstructionsListContext(Context, _parentState);
		InstructionsListContext _prevctx = _localctx;
		int _startState = 26;
		EnterRecursionRule(_localctx, 26, RULE_instructionsList, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 159;
			instruction();
			}
			Context.Stop = TokenStream.LT(-1);
			State = 165;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,8,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new InstructionsListContext(_parentctx, _parentState);
					PushNewRecursionContext(_localctx, _startState, RULE_instructionsList);
					State = 161;
					if (!(Precpred(Context, 2))) throw new FailedPredicateException(this, "Precpred(Context, 2)");
					State = 162;
					instruction();
					}
					} 
				}
				State = 167;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,8,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class InstructionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INSTRUCTIONEND() { return GetToken(IsisParser.INSTRUCTIONEND, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public InstructionIfContext instructionIf() {
			return GetRuleContext<InstructionIfContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public InstructionLoopContext instructionLoop() {
			return GetRuleContext<InstructionLoopContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public InstructionReturnContext instructionReturn() {
			return GetRuleContext<InstructionReturnContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public InstructionBreakContext instructionBreak() {
			return GetRuleContext<InstructionBreakContext>(0);
		}
		public InstructionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_instruction; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IIsisParserListener typedListener = listener as IIsisParserListener;
			if (typedListener != null) typedListener.EnterInstruction(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IIsisParserListener typedListener = listener as IIsisParserListener;
			if (typedListener != null) typedListener.ExitInstruction(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IIsisParserVisitor<TResult> typedVisitor = visitor as IIsisParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInstruction(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public InstructionContext instruction() {
		InstructionContext _localctx = new InstructionContext(Context, State);
		EnterRule(_localctx, 28, RULE_instruction);
		try {
			State = 175;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case CHARCONST:
			case STRINGCONST:
			case CHAR:
			case INT:
			case FRACTIONAL:
			case STRING:
			case THOUSANDSYMBOL:
			case HUNDREDSYMBOL:
			case TENSYMBOL:
			case UNITSYMBOL:
			case ZERO:
			case TENTHOUSANDSYMBOL:
			case HUNDREDTHOUSANDSYMBOL:
			case MILLIONSYMBOL:
			case TRUE:
			case FALSE:
			case LEFTBRACKET:
			case PLUS:
			case MINUS:
			case NOT:
			case IDENTIFIER:
				EnterOuterAlt(_localctx, 1);
				{
				State = 168;
				expression();
				State = 169;
				Match(INSTRUCTIONEND);
				}
				break;
			case IF:
				EnterOuterAlt(_localctx, 2);
				{
				State = 171;
				instructionIf();
				}
				break;
			case WHILE:
			case DO:
			case FOR:
				EnterOuterAlt(_localctx, 3);
				{
				State = 172;
				instructionLoop();
				}
				break;
			case RETURN:
				EnterOuterAlt(_localctx, 4);
				{
				State = 173;
				instructionReturn();
				}
				break;
			case BREAK:
				EnterOuterAlt(_localctx, 5);
				{
				State = 174;
				instructionBreak();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InstructionIfContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IF() { return GetToken(IsisParser.IF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEFTPAREN() { return GetToken(IsisParser.LEFTPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public BoolExpressionContext boolExpression() {
			return GetRuleContext<BoolExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RIGHTPAREN() { return GetToken(IsisParser.RIGHTPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] LEFTBRACE() { return GetTokens(IsisParser.LEFTBRACE); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEFTBRACE(int i) {
			return GetToken(IsisParser.LEFTBRACE, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public InstructionsContext[] instructions() {
			return GetRuleContexts<InstructionsContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public InstructionsContext instructions(int i) {
			return GetRuleContext<InstructionsContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] RIGHTBRACE() { return GetTokens(IsisParser.RIGHTBRACE); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RIGHTBRACE(int i) {
			return GetToken(IsisParser.RIGHTBRACE, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ELSE() { return GetToken(IsisParser.ELSE, 0); }
		public InstructionIfContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_instructionIf; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IIsisParserListener typedListener = listener as IIsisParserListener;
			if (typedListener != null) typedListener.EnterInstructionIf(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IIsisParserListener typedListener = listener as IIsisParserListener;
			if (typedListener != null) typedListener.ExitInstructionIf(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IIsisParserVisitor<TResult> typedVisitor = visitor as IIsisParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInstructionIf(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public InstructionIfContext instructionIf() {
		InstructionIfContext _localctx = new InstructionIfContext(Context, State);
		EnterRule(_localctx, 30, RULE_instructionIf);
		try {
			State = 197;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,10,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 177;
				Match(IF);
				State = 178;
				Match(LEFTPAREN);
				State = 179;
				boolExpression(0);
				State = 180;
				Match(RIGHTPAREN);
				State = 181;
				Match(LEFTBRACE);
				State = 182;
				instructions();
				State = 183;
				Match(RIGHTBRACE);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 185;
				Match(IF);
				State = 186;
				Match(LEFTPAREN);
				State = 187;
				boolExpression(0);
				State = 188;
				Match(RIGHTPAREN);
				State = 189;
				Match(LEFTBRACE);
				State = 190;
				instructions();
				State = 191;
				Match(RIGHTBRACE);
				State = 192;
				Match(ELSE);
				State = 193;
				Match(LEFTBRACE);
				State = 194;
				instructions();
				State = 195;
				Match(RIGHTBRACE);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InstructionLoopContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FOR() { return GetToken(IsisParser.FOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEFTPAREN() { return GetToken(IsisParser.LEFTPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] INSTRUCTIONEND() { return GetTokens(IsisParser.INSTRUCTIONEND); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INSTRUCTIONEND(int i) {
			return GetToken(IsisParser.INSTRUCTIONEND, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BoolExpressionContext boolExpression() {
			return GetRuleContext<BoolExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RIGHTPAREN() { return GetToken(IsisParser.RIGHTPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEFTBRACE() { return GetToken(IsisParser.LEFTBRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public InstructionsContext instructions() {
			return GetRuleContext<InstructionsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RIGHTBRACE() { return GetToken(IsisParser.RIGHTBRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WHILE() { return GetToken(IsisParser.WHILE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DO() { return GetToken(IsisParser.DO, 0); }
		public InstructionLoopContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_instructionLoop; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IIsisParserListener typedListener = listener as IIsisParserListener;
			if (typedListener != null) typedListener.EnterInstructionLoop(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IIsisParserListener typedListener = listener as IIsisParserListener;
			if (typedListener != null) typedListener.ExitInstructionLoop(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IIsisParserVisitor<TResult> typedVisitor = visitor as IIsisParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInstructionLoop(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public InstructionLoopContext instructionLoop() {
		InstructionLoopContext _localctx = new InstructionLoopContext(Context, State);
		EnterRule(_localctx, 32, RULE_instructionLoop);
		try {
			State = 228;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case FOR:
				EnterOuterAlt(_localctx, 1);
				{
				State = 199;
				Match(FOR);
				State = 200;
				Match(LEFTPAREN);
				State = 201;
				expression();
				State = 202;
				Match(INSTRUCTIONEND);
				State = 203;
				boolExpression(0);
				State = 204;
				Match(INSTRUCTIONEND);
				State = 205;
				expression();
				State = 206;
				Match(RIGHTPAREN);
				State = 207;
				Match(LEFTBRACE);
				State = 208;
				instructions();
				State = 209;
				Match(RIGHTBRACE);
				}
				break;
			case WHILE:
				EnterOuterAlt(_localctx, 2);
				{
				State = 211;
				Match(WHILE);
				State = 212;
				Match(LEFTPAREN);
				State = 213;
				boolExpression(0);
				State = 214;
				Match(RIGHTPAREN);
				State = 215;
				Match(LEFTBRACE);
				State = 216;
				instructions();
				State = 217;
				Match(RIGHTBRACE);
				}
				break;
			case DO:
				EnterOuterAlt(_localctx, 3);
				{
				State = 219;
				Match(DO);
				State = 220;
				Match(LEFTBRACE);
				State = 221;
				instructions();
				State = 222;
				Match(RIGHTBRACE);
				State = 223;
				Match(WHILE);
				State = 224;
				Match(LEFTPAREN);
				State = 225;
				boolExpression(0);
				State = 226;
				Match(RIGHTPAREN);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InstructionReturnContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RETURN() { return GetToken(IsisParser.RETURN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INSTRUCTIONEND() { return GetToken(IsisParser.INSTRUCTIONEND, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public InstructionReturnContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_instructionReturn; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IIsisParserListener typedListener = listener as IIsisParserListener;
			if (typedListener != null) typedListener.EnterInstructionReturn(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IIsisParserListener typedListener = listener as IIsisParserListener;
			if (typedListener != null) typedListener.ExitInstructionReturn(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IIsisParserVisitor<TResult> typedVisitor = visitor as IIsisParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInstructionReturn(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public InstructionReturnContext instructionReturn() {
		InstructionReturnContext _localctx = new InstructionReturnContext(Context, State);
		EnterRule(_localctx, 34, RULE_instructionReturn);
		try {
			State = 236;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,12,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 230;
				Match(RETURN);
				State = 231;
				Match(INSTRUCTIONEND);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 232;
				Match(RETURN);
				State = 233;
				expression();
				State = 234;
				Match(INSTRUCTIONEND);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InstructionBreakContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BREAK() { return GetToken(IsisParser.BREAK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INSTRUCTIONEND() { return GetToken(IsisParser.INSTRUCTIONEND, 0); }
		public InstructionBreakContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_instructionBreak; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IIsisParserListener typedListener = listener as IIsisParserListener;
			if (typedListener != null) typedListener.EnterInstructionBreak(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IIsisParserListener typedListener = listener as IIsisParserListener;
			if (typedListener != null) typedListener.ExitInstructionBreak(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IIsisParserVisitor<TResult> typedVisitor = visitor as IIsisParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInstructionBreak(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public InstructionBreakContext instructionBreak() {
		InstructionBreakContext _localctx = new InstructionBreakContext(Context, State);
		EnterRule(_localctx, 36, RULE_instructionBreak);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 238;
			Match(BREAK);
			State = 239;
			Match(INSTRUCTIONEND);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public VariableContext variable() {
			return GetRuleContext<VariableContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASSIGN() { return GetToken(IsisParser.ASSIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INCREMENTBY() { return GetToken(IsisParser.INCREMENTBY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DECREMENTBY() { return GetToken(IsisParser.DECREMENTBY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MULTIPLYBY() { return GetToken(IsisParser.MULTIPLYBY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DIVIDEBY() { return GetToken(IsisParser.DIVIDEBY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INCREMENT() { return GetToken(IsisParser.INCREMENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DECREMENT() { return GetToken(IsisParser.DECREMENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public BoolExpressionContext boolExpression() {
			return GetRuleContext<BoolExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SumExpressionContext sumExpression() {
			return GetRuleContext<SumExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DeclarationVariableContext declarationVariable() {
			return GetRuleContext<DeclarationVariableContext>(0);
		}
		public ExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IIsisParserListener typedListener = listener as IIsisParserListener;
			if (typedListener != null) typedListener.EnterExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IIsisParserListener typedListener = listener as IIsisParserListener;
			if (typedListener != null) typedListener.ExitExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IIsisParserVisitor<TResult> typedVisitor = visitor as IIsisParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionContext expression() {
		ExpressionContext _localctx = new ExpressionContext(Context, State);
		EnterRule(_localctx, 38, RULE_expression);
		try {
			State = 274;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,13,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 241;
				variable();
				State = 242;
				Match(ASSIGN);
				State = 243;
				expression();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 245;
				variable();
				State = 246;
				Match(INCREMENTBY);
				State = 247;
				expression();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 249;
				variable();
				State = 250;
				Match(DECREMENTBY);
				State = 251;
				expression();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 253;
				variable();
				State = 254;
				Match(MULTIPLYBY);
				State = 255;
				expression();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 257;
				variable();
				State = 258;
				Match(DIVIDEBY);
				State = 259;
				expression();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 261;
				variable();
				State = 262;
				Match(INCREMENT);
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 264;
				variable();
				State = 265;
				Match(DECREMENT);
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 267;
				boolExpression(0);
				}
				break;
			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 268;
				sumExpression(0);
				}
				break;
			case 10:
				EnterOuterAlt(_localctx, 10);
				{
				State = 269;
				declarationVariable();
				}
				break;
			case 11:
				EnterOuterAlt(_localctx, 11);
				{
				State = 270;
				declarationVariable();
				State = 271;
				Match(ASSIGN);
				State = 272;
				expression();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BoolExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public AndExpressionContext andExpression() {
			return GetRuleContext<AndExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BoolExpressionContext boolExpression() {
			return GetRuleContext<BoolExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OR() { return GetToken(IsisParser.OR, 0); }
		public BoolExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_boolExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IIsisParserListener typedListener = listener as IIsisParserListener;
			if (typedListener != null) typedListener.EnterBoolExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IIsisParserListener typedListener = listener as IIsisParserListener;
			if (typedListener != null) typedListener.ExitBoolExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IIsisParserVisitor<TResult> typedVisitor = visitor as IIsisParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBoolExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BoolExpressionContext boolExpression() {
		return boolExpression(0);
	}

	private BoolExpressionContext boolExpression(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		BoolExpressionContext _localctx = new BoolExpressionContext(Context, _parentState);
		BoolExpressionContext _prevctx = _localctx;
		int _startState = 40;
		EnterRecursionRule(_localctx, 40, RULE_boolExpression, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 277;
			andExpression(0);
			}
			Context.Stop = TokenStream.LT(-1);
			State = 284;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,14,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new BoolExpressionContext(_parentctx, _parentState);
					PushNewRecursionContext(_localctx, _startState, RULE_boolExpression);
					State = 279;
					if (!(Precpred(Context, 2))) throw new FailedPredicateException(this, "Precpred(Context, 2)");
					State = 280;
					Match(OR);
					State = 281;
					andExpression(0);
					}
					} 
				}
				State = 286;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,14,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class AndExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public NotExpressionContext notExpression() {
			return GetRuleContext<NotExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AndExpressionContext andExpression() {
			return GetRuleContext<AndExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AND() { return GetToken(IsisParser.AND, 0); }
		public AndExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_andExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IIsisParserListener typedListener = listener as IIsisParserListener;
			if (typedListener != null) typedListener.EnterAndExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IIsisParserListener typedListener = listener as IIsisParserListener;
			if (typedListener != null) typedListener.ExitAndExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IIsisParserVisitor<TResult> typedVisitor = visitor as IIsisParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAndExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AndExpressionContext andExpression() {
		return andExpression(0);
	}

	private AndExpressionContext andExpression(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		AndExpressionContext _localctx = new AndExpressionContext(Context, _parentState);
		AndExpressionContext _prevctx = _localctx;
		int _startState = 42;
		EnterRecursionRule(_localctx, 42, RULE_andExpression, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 288;
			notExpression();
			}
			Context.Stop = TokenStream.LT(-1);
			State = 295;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,15,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new AndExpressionContext(_parentctx, _parentState);
					PushNewRecursionContext(_localctx, _startState, RULE_andExpression);
					State = 290;
					if (!(Precpred(Context, 2))) throw new FailedPredicateException(this, "Precpred(Context, 2)");
					State = 291;
					Match(AND);
					State = 292;
					notExpression();
					}
					} 
				}
				State = 297;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,15,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class NotExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOT() { return GetToken(IsisParser.NOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public NotExpressionContext notExpression() {
			return GetRuleContext<NotExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CompareExpressionContext compareExpression() {
			return GetRuleContext<CompareExpressionContext>(0);
		}
		public NotExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_notExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IIsisParserListener typedListener = listener as IIsisParserListener;
			if (typedListener != null) typedListener.EnterNotExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IIsisParserListener typedListener = listener as IIsisParserListener;
			if (typedListener != null) typedListener.ExitNotExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IIsisParserVisitor<TResult> typedVisitor = visitor as IIsisParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNotExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NotExpressionContext notExpression() {
		NotExpressionContext _localctx = new NotExpressionContext(Context, State);
		EnterRule(_localctx, 44, RULE_notExpression);
		try {
			State = 301;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case NOT:
				EnterOuterAlt(_localctx, 1);
				{
				State = 298;
				Match(NOT);
				State = 299;
				notExpression();
				}
				break;
			case CHARCONST:
			case STRINGCONST:
			case THOUSANDSYMBOL:
			case HUNDREDSYMBOL:
			case TENSYMBOL:
			case UNITSYMBOL:
			case ZERO:
			case TENTHOUSANDSYMBOL:
			case HUNDREDTHOUSANDSYMBOL:
			case MILLIONSYMBOL:
			case TRUE:
			case FALSE:
			case LEFTBRACKET:
			case PLUS:
			case MINUS:
			case IDENTIFIER:
				EnterOuterAlt(_localctx, 2);
				{
				State = 300;
				compareExpression();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CompareExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public SumExpressionContext[] sumExpression() {
			return GetRuleContexts<SumExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public SumExpressionContext sumExpression(int i) {
			return GetRuleContext<SumExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CompareOperatorContext compareOperator() {
			return GetRuleContext<CompareOperatorContext>(0);
		}
		public CompareExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_compareExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IIsisParserListener typedListener = listener as IIsisParserListener;
			if (typedListener != null) typedListener.EnterCompareExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IIsisParserListener typedListener = listener as IIsisParserListener;
			if (typedListener != null) typedListener.ExitCompareExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IIsisParserVisitor<TResult> typedVisitor = visitor as IIsisParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCompareExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CompareExpressionContext compareExpression() {
		CompareExpressionContext _localctx = new CompareExpressionContext(Context, State);
		EnterRule(_localctx, 46, RULE_compareExpression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 303;
			sumExpression(0);
			State = 304;
			compareOperator();
			State = 305;
			sumExpression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CompareOperatorContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUALS() { return GetToken(IsisParser.EQUALS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOTEQUALS() { return GetToken(IsisParser.NOTEQUALS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GREATER() { return GetToken(IsisParser.GREATER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GREATEREQUAL() { return GetToken(IsisParser.GREATEREQUAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LESSER() { return GetToken(IsisParser.LESSER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LESSEREQUAL() { return GetToken(IsisParser.LESSEREQUAL, 0); }
		public CompareOperatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_compareOperator; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IIsisParserListener typedListener = listener as IIsisParserListener;
			if (typedListener != null) typedListener.EnterCompareOperator(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IIsisParserListener typedListener = listener as IIsisParserListener;
			if (typedListener != null) typedListener.ExitCompareOperator(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IIsisParserVisitor<TResult> typedVisitor = visitor as IIsisParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCompareOperator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CompareOperatorContext compareOperator() {
		CompareOperatorContext _localctx = new CompareOperatorContext(Context, State);
		EnterRule(_localctx, 48, RULE_compareOperator);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 307;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << GREATEREQUAL) | (1L << LESSEREQUAL) | (1L << NOTEQUALS) | (1L << EQUALS) | (1L << GREATER) | (1L << LESSER))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SumExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public MultExpressionContext multExpression() {
			return GetRuleContext<MultExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SumExpressionContext sumExpression() {
			return GetRuleContext<SumExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SumOperatorContext sumOperator() {
			return GetRuleContext<SumOperatorContext>(0);
		}
		public SumExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_sumExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IIsisParserListener typedListener = listener as IIsisParserListener;
			if (typedListener != null) typedListener.EnterSumExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IIsisParserListener typedListener = listener as IIsisParserListener;
			if (typedListener != null) typedListener.ExitSumExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IIsisParserVisitor<TResult> typedVisitor = visitor as IIsisParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSumExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SumExpressionContext sumExpression() {
		return sumExpression(0);
	}

	private SumExpressionContext sumExpression(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		SumExpressionContext _localctx = new SumExpressionContext(Context, _parentState);
		SumExpressionContext _prevctx = _localctx;
		int _startState = 50;
		EnterRecursionRule(_localctx, 50, RULE_sumExpression, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 310;
			multExpression(0);
			}
			Context.Stop = TokenStream.LT(-1);
			State = 318;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,17,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new SumExpressionContext(_parentctx, _parentState);
					PushNewRecursionContext(_localctx, _startState, RULE_sumExpression);
					State = 312;
					if (!(Precpred(Context, 2))) throw new FailedPredicateException(this, "Precpred(Context, 2)");
					State = 313;
					sumOperator();
					State = 314;
					multExpression(0);
					}
					} 
				}
				State = 320;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,17,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class SumOperatorContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PLUS() { return GetToken(IsisParser.PLUS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MINUS() { return GetToken(IsisParser.MINUS, 0); }
		public SumOperatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_sumOperator; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IIsisParserListener typedListener = listener as IIsisParserListener;
			if (typedListener != null) typedListener.EnterSumOperator(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IIsisParserListener typedListener = listener as IIsisParserListener;
			if (typedListener != null) typedListener.ExitSumOperator(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IIsisParserVisitor<TResult> typedVisitor = visitor as IIsisParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSumOperator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SumOperatorContext sumOperator() {
		SumOperatorContext _localctx = new SumOperatorContext(Context, State);
		EnterRule(_localctx, 52, RULE_sumOperator);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 321;
			_la = TokenStream.LA(1);
			if ( !(_la==PLUS || _la==MINUS) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MultExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public UnaryExpressionContext unaryExpression() {
			return GetRuleContext<UnaryExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public MultExpressionContext multExpression() {
			return GetRuleContext<MultExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public MultOperatorContext multOperator() {
			return GetRuleContext<MultOperatorContext>(0);
		}
		public MultExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_multExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IIsisParserListener typedListener = listener as IIsisParserListener;
			if (typedListener != null) typedListener.EnterMultExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IIsisParserListener typedListener = listener as IIsisParserListener;
			if (typedListener != null) typedListener.ExitMultExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IIsisParserVisitor<TResult> typedVisitor = visitor as IIsisParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMultExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MultExpressionContext multExpression() {
		return multExpression(0);
	}

	private MultExpressionContext multExpression(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		MultExpressionContext _localctx = new MultExpressionContext(Context, _parentState);
		MultExpressionContext _prevctx = _localctx;
		int _startState = 54;
		EnterRecursionRule(_localctx, 54, RULE_multExpression, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 324;
			unaryExpression();
			}
			Context.Stop = TokenStream.LT(-1);
			State = 332;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,18,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new MultExpressionContext(_parentctx, _parentState);
					PushNewRecursionContext(_localctx, _startState, RULE_multExpression);
					State = 326;
					if (!(Precpred(Context, 2))) throw new FailedPredicateException(this, "Precpred(Context, 2)");
					State = 327;
					multOperator();
					State = 328;
					unaryExpression();
					}
					} 
				}
				State = 334;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,18,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class MultOperatorContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MULTSYMBOL() { return GetToken(IsisParser.MULTSYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DIVSYMBOL() { return GetToken(IsisParser.DIVSYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MODSYMBOL() { return GetToken(IsisParser.MODSYMBOL, 0); }
		public MultOperatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_multOperator; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IIsisParserListener typedListener = listener as IIsisParserListener;
			if (typedListener != null) typedListener.EnterMultOperator(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IIsisParserListener typedListener = listener as IIsisParserListener;
			if (typedListener != null) typedListener.ExitMultOperator(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IIsisParserVisitor<TResult> typedVisitor = visitor as IIsisParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMultOperator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MultOperatorContext multOperator() {
		MultOperatorContext _localctx = new MultOperatorContext(Context, State);
		EnterRule(_localctx, 56, RULE_multOperator);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 335;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << MULTSYMBOL) | (1L << DIVSYMBOL) | (1L << MODSYMBOL))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UnaryExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public UnaryOperatorContext unaryOperator() {
			return GetRuleContext<UnaryOperatorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public UnaryExpressionContext unaryExpression() {
			return GetRuleContext<UnaryExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FactorContext factor() {
			return GetRuleContext<FactorContext>(0);
		}
		public UnaryExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_unaryExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IIsisParserListener typedListener = listener as IIsisParserListener;
			if (typedListener != null) typedListener.EnterUnaryExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IIsisParserListener typedListener = listener as IIsisParserListener;
			if (typedListener != null) typedListener.ExitUnaryExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IIsisParserVisitor<TResult> typedVisitor = visitor as IIsisParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUnaryExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UnaryExpressionContext unaryExpression() {
		UnaryExpressionContext _localctx = new UnaryExpressionContext(Context, State);
		EnterRule(_localctx, 58, RULE_unaryExpression);
		try {
			State = 341;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case PLUS:
			case MINUS:
				EnterOuterAlt(_localctx, 1);
				{
				State = 337;
				unaryOperator();
				State = 338;
				unaryExpression();
				}
				break;
			case CHARCONST:
			case STRINGCONST:
			case THOUSANDSYMBOL:
			case HUNDREDSYMBOL:
			case TENSYMBOL:
			case UNITSYMBOL:
			case ZERO:
			case TENTHOUSANDSYMBOL:
			case HUNDREDTHOUSANDSYMBOL:
			case MILLIONSYMBOL:
			case TRUE:
			case FALSE:
			case LEFTBRACKET:
			case IDENTIFIER:
				EnterOuterAlt(_localctx, 2);
				{
				State = 340;
				factor();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UnaryOperatorContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PLUS() { return GetToken(IsisParser.PLUS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MINUS() { return GetToken(IsisParser.MINUS, 0); }
		public UnaryOperatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_unaryOperator; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IIsisParserListener typedListener = listener as IIsisParserListener;
			if (typedListener != null) typedListener.EnterUnaryOperator(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IIsisParserListener typedListener = listener as IIsisParserListener;
			if (typedListener != null) typedListener.ExitUnaryOperator(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IIsisParserVisitor<TResult> typedVisitor = visitor as IIsisParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUnaryOperator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UnaryOperatorContext unaryOperator() {
		UnaryOperatorContext _localctx = new UnaryOperatorContext(Context, State);
		EnterRule(_localctx, 60, RULE_unaryOperator);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 343;
			_la = TokenStream.LA(1);
			if ( !(_la==PLUS || _la==MINUS) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FactorContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public VariableContext variable() {
			return GetRuleContext<VariableContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ConstantContext constant() {
			return GetRuleContext<ConstantContext>(0);
		}
		public FactorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_factor; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IIsisParserListener typedListener = listener as IIsisParserListener;
			if (typedListener != null) typedListener.EnterFactor(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IIsisParserListener typedListener = listener as IIsisParserListener;
			if (typedListener != null) typedListener.ExitFactor(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IIsisParserVisitor<TResult> typedVisitor = visitor as IIsisParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFactor(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FactorContext factor() {
		FactorContext _localctx = new FactorContext(Context, State);
		EnterRule(_localctx, 62, RULE_factor);
		try {
			State = 347;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case IDENTIFIER:
				EnterOuterAlt(_localctx, 1);
				{
				State = 345;
				variable();
				}
				break;
			case CHARCONST:
			case STRINGCONST:
			case THOUSANDSYMBOL:
			case HUNDREDSYMBOL:
			case TENSYMBOL:
			case UNITSYMBOL:
			case ZERO:
			case TENTHOUSANDSYMBOL:
			case HUNDREDTHOUSANDSYMBOL:
			case MILLIONSYMBOL:
			case TRUE:
			case FALSE:
			case LEFTBRACKET:
				EnterOuterAlt(_localctx, 2);
				{
				State = 346;
				constant();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VariableContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(IsisParser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEFTBRACKET() { return GetToken(IsisParser.LEFTBRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public NumberConstantContext numberConstant() {
			return GetRuleContext<NumberConstantContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RIGHTBRACKET() { return GetToken(IsisParser.RIGHTBRACKET, 0); }
		public VariableContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_variable; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IIsisParserListener typedListener = listener as IIsisParserListener;
			if (typedListener != null) typedListener.EnterVariable(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IIsisParserListener typedListener = listener as IIsisParserListener;
			if (typedListener != null) typedListener.ExitVariable(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IIsisParserVisitor<TResult> typedVisitor = visitor as IIsisParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVariable(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VariableContext variable() {
		VariableContext _localctx = new VariableContext(Context, State);
		EnterRule(_localctx, 64, RULE_variable);
		try {
			State = 355;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,21,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 349;
				Match(IDENTIFIER);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 350;
				Match(IDENTIFIER);
				State = 351;
				Match(LEFTBRACKET);
				State = 352;
				numberConstant();
				State = 353;
				Match(RIGHTBRACKET);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConstantContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public StringConstantContext stringConstant() {
			return GetRuleContext<StringConstantContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CharConstantContext charConstant() {
			return GetRuleContext<CharConstantContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NumberConstantContext numberConstant() {
			return GetRuleContext<NumberConstantContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BoolConstantContext boolConstant() {
			return GetRuleContext<BoolConstantContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEFTBRACKET() { return GetToken(IsisParser.LEFTBRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ConstantsContext constants() {
			return GetRuleContext<ConstantsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RIGHTBRACKET() { return GetToken(IsisParser.RIGHTBRACKET, 0); }
		public ConstantContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_constant; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IIsisParserListener typedListener = listener as IIsisParserListener;
			if (typedListener != null) typedListener.EnterConstant(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IIsisParserListener typedListener = listener as IIsisParserListener;
			if (typedListener != null) typedListener.ExitConstant(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IIsisParserVisitor<TResult> typedVisitor = visitor as IIsisParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConstant(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ConstantContext constant() {
		ConstantContext _localctx = new ConstantContext(Context, State);
		EnterRule(_localctx, 66, RULE_constant);
		try {
			State = 365;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case STRINGCONST:
				EnterOuterAlt(_localctx, 1);
				{
				State = 357;
				stringConstant();
				}
				break;
			case CHARCONST:
				EnterOuterAlt(_localctx, 2);
				{
				State = 358;
				charConstant();
				}
				break;
			case THOUSANDSYMBOL:
			case HUNDREDSYMBOL:
			case TENSYMBOL:
			case UNITSYMBOL:
			case ZERO:
			case TENTHOUSANDSYMBOL:
			case HUNDREDTHOUSANDSYMBOL:
			case MILLIONSYMBOL:
				EnterOuterAlt(_localctx, 3);
				{
				State = 359;
				numberConstant();
				}
				break;
			case TRUE:
			case FALSE:
				EnterOuterAlt(_localctx, 4);
				{
				State = 360;
				boolConstant();
				}
				break;
			case LEFTBRACKET:
				EnterOuterAlt(_localctx, 5);
				{
				State = 361;
				Match(LEFTBRACKET);
				State = 362;
				constants();
				State = 363;
				Match(RIGHTBRACKET);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConstantsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ConstantListContext constantList() {
			return GetRuleContext<ConstantListContext>(0);
		}
		public ConstantsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_constants; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IIsisParserListener typedListener = listener as IIsisParserListener;
			if (typedListener != null) typedListener.EnterConstants(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IIsisParserListener typedListener = listener as IIsisParserListener;
			if (typedListener != null) typedListener.ExitConstants(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IIsisParserVisitor<TResult> typedVisitor = visitor as IIsisParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConstants(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ConstantsContext constants() {
		ConstantsContext _localctx = new ConstantsContext(Context, State);
		EnterRule(_localctx, 68, RULE_constants);
		try {
			State = 369;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case CHARCONST:
			case STRINGCONST:
			case THOUSANDSYMBOL:
			case HUNDREDSYMBOL:
			case TENSYMBOL:
			case UNITSYMBOL:
			case ZERO:
			case TENTHOUSANDSYMBOL:
			case HUNDREDTHOUSANDSYMBOL:
			case MILLIONSYMBOL:
			case TRUE:
			case FALSE:
			case LEFTBRACKET:
				EnterOuterAlt(_localctx, 1);
				{
				State = 367;
				constantList(0);
				}
				break;
			case RIGHTBRACKET:
				EnterOuterAlt(_localctx, 2);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConstantListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ConstantContext constant() {
			return GetRuleContext<ConstantContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ConstantListContext constantList() {
			return GetRuleContext<ConstantListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA() { return GetToken(IsisParser.COMMA, 0); }
		public ConstantListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_constantList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IIsisParserListener typedListener = listener as IIsisParserListener;
			if (typedListener != null) typedListener.EnterConstantList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IIsisParserListener typedListener = listener as IIsisParserListener;
			if (typedListener != null) typedListener.ExitConstantList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IIsisParserVisitor<TResult> typedVisitor = visitor as IIsisParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConstantList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ConstantListContext constantList() {
		return constantList(0);
	}

	private ConstantListContext constantList(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		ConstantListContext _localctx = new ConstantListContext(Context, _parentState);
		ConstantListContext _prevctx = _localctx;
		int _startState = 70;
		EnterRecursionRule(_localctx, 70, RULE_constantList, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 372;
			constant();
			}
			Context.Stop = TokenStream.LT(-1);
			State = 379;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,24,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new ConstantListContext(_parentctx, _parentState);
					PushNewRecursionContext(_localctx, _startState, RULE_constantList);
					State = 374;
					if (!(Precpred(Context, 2))) throw new FailedPredicateException(this, "Precpred(Context, 2)");
					State = 375;
					Match(COMMA);
					State = 376;
					constant();
					}
					} 
				}
				State = 381;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,24,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class RawNumberContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] MILLIONSYMBOL() { return GetTokens(IsisParser.MILLIONSYMBOL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MILLIONSYMBOL(int i) {
			return GetToken(IsisParser.MILLIONSYMBOL, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] HUNDREDTHOUSANDSYMBOL() { return GetTokens(IsisParser.HUNDREDTHOUSANDSYMBOL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode HUNDREDTHOUSANDSYMBOL(int i) {
			return GetToken(IsisParser.HUNDREDTHOUSANDSYMBOL, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] TENTHOUSANDSYMBOL() { return GetTokens(IsisParser.TENTHOUSANDSYMBOL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TENTHOUSANDSYMBOL(int i) {
			return GetToken(IsisParser.TENTHOUSANDSYMBOL, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode THOUSANDSYMBOL() { return GetToken(IsisParser.THOUSANDSYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode HUNDREDSYMBOL() { return GetToken(IsisParser.HUNDREDSYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TENSYMBOL() { return GetToken(IsisParser.TENSYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNITSYMBOL() { return GetToken(IsisParser.UNITSYMBOL, 0); }
		public RawNumberContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_rawNumber; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IIsisParserListener typedListener = listener as IIsisParserListener;
			if (typedListener != null) typedListener.EnterRawNumber(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IIsisParserListener typedListener = listener as IIsisParserListener;
			if (typedListener != null) typedListener.ExitRawNumber(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IIsisParserVisitor<TResult> typedVisitor = visitor as IIsisParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRawNumber(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RawNumberContext rawNumber() {
		RawNumberContext _localctx = new RawNumberContext(Context, State);
		EnterRule(_localctx, 72, RULE_rawNumber);
		try {
			int _alt;
			State = 473;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case MILLIONSYMBOL:
				EnterOuterAlt(_localctx, 1);
				{
				State = 383;
				ErrorHandler.Sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						{
						State = 382;
						Match(MILLIONSYMBOL);
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					State = 385;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,25,Context);
				} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
				State = 390;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,26,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						State = 387;
						Match(HUNDREDTHOUSANDSYMBOL);
						}
						} 
					}
					State = 392;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,26,Context);
				}
				State = 396;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,27,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						State = 393;
						Match(TENTHOUSANDSYMBOL);
						}
						} 
					}
					State = 398;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,27,Context);
				}
				State = 400;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,28,Context) ) {
				case 1:
					{
					State = 399;
					Match(THOUSANDSYMBOL);
					}
					break;
				}
				State = 403;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,29,Context) ) {
				case 1:
					{
					State = 402;
					Match(HUNDREDSYMBOL);
					}
					break;
				}
				State = 406;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,30,Context) ) {
				case 1:
					{
					State = 405;
					Match(TENSYMBOL);
					}
					break;
				}
				State = 409;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,31,Context) ) {
				case 1:
					{
					State = 408;
					Match(UNITSYMBOL);
					}
					break;
				}
				}
				break;
			case HUNDREDTHOUSANDSYMBOL:
				EnterOuterAlt(_localctx, 2);
				{
				State = 412;
				ErrorHandler.Sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						{
						State = 411;
						Match(HUNDREDTHOUSANDSYMBOL);
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					State = 414;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,32,Context);
				} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
				State = 419;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,33,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						State = 416;
						Match(TENTHOUSANDSYMBOL);
						}
						} 
					}
					State = 421;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,33,Context);
				}
				State = 423;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,34,Context) ) {
				case 1:
					{
					State = 422;
					Match(THOUSANDSYMBOL);
					}
					break;
				}
				State = 426;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,35,Context) ) {
				case 1:
					{
					State = 425;
					Match(HUNDREDSYMBOL);
					}
					break;
				}
				State = 429;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,36,Context) ) {
				case 1:
					{
					State = 428;
					Match(TENSYMBOL);
					}
					break;
				}
				State = 432;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,37,Context) ) {
				case 1:
					{
					State = 431;
					Match(UNITSYMBOL);
					}
					break;
				}
				}
				break;
			case TENTHOUSANDSYMBOL:
				EnterOuterAlt(_localctx, 3);
				{
				State = 435;
				ErrorHandler.Sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						{
						State = 434;
						Match(TENTHOUSANDSYMBOL);
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					State = 437;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,38,Context);
				} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
				State = 440;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,39,Context) ) {
				case 1:
					{
					State = 439;
					Match(THOUSANDSYMBOL);
					}
					break;
				}
				State = 443;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,40,Context) ) {
				case 1:
					{
					State = 442;
					Match(HUNDREDSYMBOL);
					}
					break;
				}
				State = 446;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,41,Context) ) {
				case 1:
					{
					State = 445;
					Match(TENSYMBOL);
					}
					break;
				}
				State = 449;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,42,Context) ) {
				case 1:
					{
					State = 448;
					Match(UNITSYMBOL);
					}
					break;
				}
				}
				break;
			case THOUSANDSYMBOL:
				EnterOuterAlt(_localctx, 4);
				{
				State = 451;
				Match(THOUSANDSYMBOL);
				State = 453;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,43,Context) ) {
				case 1:
					{
					State = 452;
					Match(HUNDREDSYMBOL);
					}
					break;
				}
				State = 456;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,44,Context) ) {
				case 1:
					{
					State = 455;
					Match(TENSYMBOL);
					}
					break;
				}
				State = 459;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,45,Context) ) {
				case 1:
					{
					State = 458;
					Match(UNITSYMBOL);
					}
					break;
				}
				}
				break;
			case HUNDREDSYMBOL:
				EnterOuterAlt(_localctx, 5);
				{
				State = 461;
				Match(HUNDREDSYMBOL);
				State = 463;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,46,Context) ) {
				case 1:
					{
					State = 462;
					Match(TENSYMBOL);
					}
					break;
				}
				State = 466;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,47,Context) ) {
				case 1:
					{
					State = 465;
					Match(UNITSYMBOL);
					}
					break;
				}
				}
				break;
			case TENSYMBOL:
				EnterOuterAlt(_localctx, 6);
				{
				State = 468;
				Match(TENSYMBOL);
				State = 470;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,48,Context) ) {
				case 1:
					{
					State = 469;
					Match(UNITSYMBOL);
					}
					break;
				}
				}
				break;
			case UNITSYMBOL:
				EnterOuterAlt(_localctx, 7);
				{
				State = 472;
				Match(UNITSYMBOL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FractionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FRACTIONSYMBOL() { return GetToken(IsisParser.FRACTIONSYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public RawNumberContext rawNumber() {
			return GetRuleContext<RawNumberContext>(0);
		}
		public FractionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fraction; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IIsisParserListener typedListener = listener as IIsisParserListener;
			if (typedListener != null) typedListener.EnterFraction(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IIsisParserListener typedListener = listener as IIsisParserListener;
			if (typedListener != null) typedListener.ExitFraction(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IIsisParserVisitor<TResult> typedVisitor = visitor as IIsisParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFraction(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FractionContext fraction() {
		FractionContext _localctx = new FractionContext(Context, State);
		EnterRule(_localctx, 74, RULE_fraction);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 475;
			Match(FRACTIONSYMBOL);
			State = 476;
			rawNumber();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NumberConstantContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ZERO() { return GetToken(IsisParser.ZERO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public RawNumberContext rawNumber() {
			return GetRuleContext<RawNumberContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FractionListContext fractionList() {
			return GetRuleContext<FractionListContext>(0);
		}
		public NumberConstantContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_numberConstant; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IIsisParserListener typedListener = listener as IIsisParserListener;
			if (typedListener != null) typedListener.EnterNumberConstant(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IIsisParserListener typedListener = listener as IIsisParserListener;
			if (typedListener != null) typedListener.ExitNumberConstant(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IIsisParserVisitor<TResult> typedVisitor = visitor as IIsisParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNumberConstant(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NumberConstantContext numberConstant() {
		NumberConstantContext _localctx = new NumberConstantContext(Context, State);
		EnterRule(_localctx, 76, RULE_numberConstant);
		try {
			State = 483;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,50,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 478;
				Match(ZERO);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 479;
				rawNumber();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 480;
				rawNumber();
				State = 481;
				fractionList(0);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FractionListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public FractionContext fraction() {
			return GetRuleContext<FractionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FractionListContext fractionList() {
			return GetRuleContext<FractionListContext>(0);
		}
		public FractionListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fractionList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IIsisParserListener typedListener = listener as IIsisParserListener;
			if (typedListener != null) typedListener.EnterFractionList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IIsisParserListener typedListener = listener as IIsisParserListener;
			if (typedListener != null) typedListener.ExitFractionList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IIsisParserVisitor<TResult> typedVisitor = visitor as IIsisParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFractionList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FractionListContext fractionList() {
		return fractionList(0);
	}

	private FractionListContext fractionList(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		FractionListContext _localctx = new FractionListContext(Context, _parentState);
		FractionListContext _prevctx = _localctx;
		int _startState = 78;
		EnterRecursionRule(_localctx, 78, RULE_fractionList, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 486;
			fraction();
			}
			Context.Stop = TokenStream.LT(-1);
			State = 492;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,51,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new FractionListContext(_parentctx, _parentState);
					PushNewRecursionContext(_localctx, _startState, RULE_fractionList);
					State = 488;
					if (!(Precpred(Context, 2))) throw new FailedPredicateException(this, "Precpred(Context, 2)");
					State = 489;
					fraction();
					}
					} 
				}
				State = 494;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,51,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class CharConstantContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CHARCONST() { return GetToken(IsisParser.CHARCONST, 0); }
		public CharConstantContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_charConstant; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IIsisParserListener typedListener = listener as IIsisParserListener;
			if (typedListener != null) typedListener.EnterCharConstant(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IIsisParserListener typedListener = listener as IIsisParserListener;
			if (typedListener != null) typedListener.ExitCharConstant(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IIsisParserVisitor<TResult> typedVisitor = visitor as IIsisParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCharConstant(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CharConstantContext charConstant() {
		CharConstantContext _localctx = new CharConstantContext(Context, State);
		EnterRule(_localctx, 80, RULE_charConstant);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 495;
			Match(CHARCONST);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StringConstantContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRINGCONST() { return GetToken(IsisParser.STRINGCONST, 0); }
		public StringConstantContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_stringConstant; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IIsisParserListener typedListener = listener as IIsisParserListener;
			if (typedListener != null) typedListener.EnterStringConstant(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IIsisParserListener typedListener = listener as IIsisParserListener;
			if (typedListener != null) typedListener.ExitStringConstant(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IIsisParserVisitor<TResult> typedVisitor = visitor as IIsisParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStringConstant(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StringConstantContext stringConstant() {
		StringConstantContext _localctx = new StringConstantContext(Context, State);
		EnterRule(_localctx, 82, RULE_stringConstant);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 497;
			Match(STRINGCONST);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BoolConstantContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TRUE() { return GetToken(IsisParser.TRUE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FALSE() { return GetToken(IsisParser.FALSE, 0); }
		public BoolConstantContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_boolConstant; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IIsisParserListener typedListener = listener as IIsisParserListener;
			if (typedListener != null) typedListener.EnterBoolConstant(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IIsisParserListener typedListener = listener as IIsisParserListener;
			if (typedListener != null) typedListener.ExitBoolConstant(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IIsisParserVisitor<TResult> typedVisitor = visitor as IIsisParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBoolConstant(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BoolConstantContext boolConstant() {
		BoolConstantContext _localctx = new BoolConstantContext(Context, State);
		EnterRule(_localctx, 84, RULE_boolConstant);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 499;
			_la = TokenStream.LA(1);
			if ( !(_la==TRUE || _la==FALSE) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 2: return declarationList_sempred((DeclarationListContext)_localctx, predIndex);
		case 10: return argumentsList_sempred((ArgumentsListContext)_localctx, predIndex);
		case 13: return instructionsList_sempred((InstructionsListContext)_localctx, predIndex);
		case 20: return boolExpression_sempred((BoolExpressionContext)_localctx, predIndex);
		case 21: return andExpression_sempred((AndExpressionContext)_localctx, predIndex);
		case 25: return sumExpression_sempred((SumExpressionContext)_localctx, predIndex);
		case 27: return multExpression_sempred((MultExpressionContext)_localctx, predIndex);
		case 35: return constantList_sempred((ConstantListContext)_localctx, predIndex);
		case 39: return fractionList_sempred((FractionListContext)_localctx, predIndex);
		}
		return true;
	}
	private bool declarationList_sempred(DeclarationListContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(Context, 2);
		}
		return true;
	}
	private bool argumentsList_sempred(ArgumentsListContext _localctx, int predIndex) {
		switch (predIndex) {
		case 1: return Precpred(Context, 2);
		}
		return true;
	}
	private bool instructionsList_sempred(InstructionsListContext _localctx, int predIndex) {
		switch (predIndex) {
		case 2: return Precpred(Context, 2);
		}
		return true;
	}
	private bool boolExpression_sempred(BoolExpressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 3: return Precpred(Context, 2);
		}
		return true;
	}
	private bool andExpression_sempred(AndExpressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 4: return Precpred(Context, 2);
		}
		return true;
	}
	private bool sumExpression_sempred(SumExpressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 5: return Precpred(Context, 2);
		}
		return true;
	}
	private bool multExpression_sempred(MultExpressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 6: return Precpred(Context, 2);
		}
		return true;
	}
	private bool constantList_sempred(ConstantListContext _localctx, int predIndex) {
		switch (predIndex) {
		case 7: return Precpred(Context, 2);
		}
		return true;
	}
	private bool fractionList_sempred(FractionListContext _localctx, int predIndex) {
		switch (predIndex) {
		case 8: return Precpred(Context, 2);
		}
		return true;
	}

	private static int[] _serializedATN = {
		4,1,64,502,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,6,2,7,
		7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,7,14,
		2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,7,21,
		2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,7,27,2,28,7,28,
		2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,7,33,2,34,7,34,2,35,7,35,
		2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,39,2,40,7,40,2,41,7,41,2,42,7,42,
		1,0,1,0,1,0,1,0,3,0,91,8,0,1,1,1,1,1,1,1,1,1,2,1,2,1,2,1,2,1,2,5,2,102,
		8,2,10,2,12,2,105,9,2,1,3,1,3,1,3,1,3,3,3,111,8,3,1,4,1,4,1,4,1,5,1,5,
		1,5,1,5,3,5,120,8,5,1,6,1,6,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,8,1,
		8,3,8,135,8,8,1,9,1,9,3,9,139,8,9,1,10,1,10,1,10,1,10,1,10,1,10,5,10,147,
		8,10,10,10,12,10,150,9,10,1,11,1,11,1,11,1,12,1,12,3,12,157,8,12,1,13,
		1,13,1,13,1,13,1,13,5,13,164,8,13,10,13,12,13,167,9,13,1,14,1,14,1,14,
		1,14,1,14,1,14,1,14,3,14,176,8,14,1,15,1,15,1,15,1,15,1,15,1,15,1,15,1,
		15,1,15,1,15,1,15,1,15,1,15,1,15,1,15,1,15,1,15,1,15,1,15,1,15,3,15,198,
		8,15,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,
		1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,
		1,16,1,16,3,16,229,8,16,1,17,1,17,1,17,1,17,1,17,1,17,3,17,237,8,17,1,
		18,1,18,1,18,1,19,1,19,1,19,1,19,1,19,1,19,1,19,1,19,1,19,1,19,1,19,1,
		19,1,19,1,19,1,19,1,19,1,19,1,19,1,19,1,19,1,19,1,19,1,19,1,19,1,19,1,
		19,1,19,1,19,1,19,1,19,1,19,1,19,1,19,3,19,275,8,19,1,20,1,20,1,20,1,20,
		1,20,1,20,5,20,283,8,20,10,20,12,20,286,9,20,1,21,1,21,1,21,1,21,1,21,
		1,21,5,21,294,8,21,10,21,12,21,297,9,21,1,22,1,22,1,22,3,22,302,8,22,1,
		23,1,23,1,23,1,23,1,24,1,24,1,25,1,25,1,25,1,25,1,25,1,25,1,25,5,25,317,
		8,25,10,25,12,25,320,9,25,1,26,1,26,1,27,1,27,1,27,1,27,1,27,1,27,1,27,
		5,27,331,8,27,10,27,12,27,334,9,27,1,28,1,28,1,29,1,29,1,29,1,29,3,29,
		342,8,29,1,30,1,30,1,31,1,31,3,31,348,8,31,1,32,1,32,1,32,1,32,1,32,1,
		32,3,32,356,8,32,1,33,1,33,1,33,1,33,1,33,1,33,1,33,1,33,3,33,366,8,33,
		1,34,1,34,3,34,370,8,34,1,35,1,35,1,35,1,35,1,35,1,35,5,35,378,8,35,10,
		35,12,35,381,9,35,1,36,4,36,384,8,36,11,36,12,36,385,1,36,5,36,389,8,36,
		10,36,12,36,392,9,36,1,36,5,36,395,8,36,10,36,12,36,398,9,36,1,36,3,36,
		401,8,36,1,36,3,36,404,8,36,1,36,3,36,407,8,36,1,36,3,36,410,8,36,1,36,
		4,36,413,8,36,11,36,12,36,414,1,36,5,36,418,8,36,10,36,12,36,421,9,36,
		1,36,3,36,424,8,36,1,36,3,36,427,8,36,1,36,3,36,430,8,36,1,36,3,36,433,
		8,36,1,36,4,36,436,8,36,11,36,12,36,437,1,36,3,36,441,8,36,1,36,3,36,444,
		8,36,1,36,3,36,447,8,36,1,36,3,36,450,8,36,1,36,1,36,3,36,454,8,36,1,36,
		3,36,457,8,36,1,36,3,36,460,8,36,1,36,1,36,3,36,464,8,36,1,36,3,36,467,
		8,36,1,36,1,36,3,36,471,8,36,1,36,3,36,474,8,36,1,37,1,37,1,37,1,38,1,
		38,1,38,1,38,1,38,3,38,484,8,38,1,39,1,39,1,39,1,39,1,39,5,39,491,8,39,
		10,39,12,39,494,9,39,1,40,1,40,1,41,1,41,1,42,1,42,1,42,0,9,4,20,26,40,
		42,50,54,70,78,43,0,2,4,6,8,10,12,14,16,18,20,22,24,26,28,30,32,34,36,
		38,40,42,44,46,48,50,52,54,56,58,60,62,64,66,68,70,72,74,76,78,80,82,84,
		0,5,2,0,8,9,11,12,2,0,53,56,60,61,1,0,47,48,1,0,50,52,1,0,30,31,532,0,
		90,1,0,0,0,2,92,1,0,0,0,4,96,1,0,0,0,6,110,1,0,0,0,8,112,1,0,0,0,10,119,
		1,0,0,0,12,121,1,0,0,0,14,123,1,0,0,0,16,134,1,0,0,0,18,138,1,0,0,0,20,
		140,1,0,0,0,22,151,1,0,0,0,24,156,1,0,0,0,26,158,1,0,0,0,28,175,1,0,0,
		0,30,197,1,0,0,0,32,228,1,0,0,0,34,236,1,0,0,0,36,238,1,0,0,0,38,274,1,
		0,0,0,40,276,1,0,0,0,42,287,1,0,0,0,44,301,1,0,0,0,46,303,1,0,0,0,48,307,
		1,0,0,0,50,309,1,0,0,0,52,321,1,0,0,0,54,323,1,0,0,0,56,335,1,0,0,0,58,
		341,1,0,0,0,60,343,1,0,0,0,62,347,1,0,0,0,64,355,1,0,0,0,66,365,1,0,0,
		0,68,369,1,0,0,0,70,371,1,0,0,0,72,473,1,0,0,0,74,475,1,0,0,0,76,483,1,
		0,0,0,78,485,1,0,0,0,80,495,1,0,0,0,82,497,1,0,0,0,84,499,1,0,0,0,86,87,
		3,4,2,0,87,88,3,2,1,0,88,91,1,0,0,0,89,91,3,2,1,0,90,86,1,0,0,0,90,89,
		1,0,0,0,91,1,1,0,0,0,92,93,5,4,0,0,93,94,3,24,12,0,94,95,5,5,0,0,95,3,
		1,0,0,0,96,97,6,2,-1,0,97,98,3,6,3,0,98,103,1,0,0,0,99,100,10,2,0,0,100,
		102,3,6,3,0,101,99,1,0,0,0,102,105,1,0,0,0,103,101,1,0,0,0,103,104,1,0,
		0,0,104,5,1,0,0,0,105,103,1,0,0,0,106,107,3,8,4,0,107,108,5,6,0,0,108,
		111,1,0,0,0,109,111,3,14,7,0,110,106,1,0,0,0,110,109,1,0,0,0,111,7,1,0,
		0,0,112,113,3,12,6,0,113,114,3,10,5,0,114,9,1,0,0,0,115,120,5,62,0,0,116,
		117,5,62,0,0,117,118,5,34,0,0,118,120,5,35,0,0,119,115,1,0,0,0,119,116,
		1,0,0,0,120,11,1,0,0,0,121,122,7,0,0,0,122,13,1,0,0,0,123,124,3,16,8,0,
		124,125,5,62,0,0,125,126,5,32,0,0,126,127,3,18,9,0,127,128,5,33,0,0,128,
		129,5,36,0,0,129,130,3,26,13,0,130,131,5,37,0,0,131,15,1,0,0,0,132,135,
		3,12,6,0,133,135,5,7,0,0,134,132,1,0,0,0,134,133,1,0,0,0,135,17,1,0,0,
		0,136,139,3,20,10,0,137,139,1,0,0,0,138,136,1,0,0,0,138,137,1,0,0,0,139,
		19,1,0,0,0,140,141,6,10,-1,0,141,142,3,22,11,0,142,148,1,0,0,0,143,144,
		10,2,0,0,144,145,5,40,0,0,145,147,3,22,11,0,146,143,1,0,0,0,147,150,1,
		0,0,0,148,146,1,0,0,0,148,149,1,0,0,0,149,21,1,0,0,0,150,148,1,0,0,0,151,
		152,3,12,6,0,152,153,3,10,5,0,153,23,1,0,0,0,154,157,3,26,13,0,155,157,
		1,0,0,0,156,154,1,0,0,0,156,155,1,0,0,0,157,25,1,0,0,0,158,159,6,13,-1,
		0,159,160,3,28,14,0,160,165,1,0,0,0,161,162,10,2,0,0,162,164,3,28,14,0,
		163,161,1,0,0,0,164,167,1,0,0,0,165,163,1,0,0,0,165,166,1,0,0,0,166,27,
		1,0,0,0,167,165,1,0,0,0,168,169,3,38,19,0,169,170,5,6,0,0,170,176,1,0,
		0,0,171,176,3,30,15,0,172,176,3,32,16,0,173,176,3,34,17,0,174,176,3,36,
		18,0,175,168,1,0,0,0,175,171,1,0,0,0,175,172,1,0,0,0,175,173,1,0,0,0,175,
		174,1,0,0,0,176,29,1,0,0,0,177,178,5,16,0,0,178,179,5,32,0,0,179,180,3,
		40,20,0,180,181,5,33,0,0,181,182,5,36,0,0,182,183,3,24,12,0,183,184,5,
		37,0,0,184,198,1,0,0,0,185,186,5,16,0,0,186,187,5,32,0,0,187,188,3,40,
		20,0,188,189,5,33,0,0,189,190,5,36,0,0,190,191,3,24,12,0,191,192,5,37,
		0,0,192,193,5,17,0,0,193,194,5,36,0,0,194,195,3,24,12,0,195,196,5,37,0,
		0,196,198,1,0,0,0,197,177,1,0,0,0,197,185,1,0,0,0,198,31,1,0,0,0,199,200,
		5,15,0,0,200,201,5,32,0,0,201,202,3,38,19,0,202,203,5,6,0,0,203,204,3,
		40,20,0,204,205,5,6,0,0,205,206,3,38,19,0,206,207,5,33,0,0,207,208,5,36,
		0,0,208,209,3,24,12,0,209,210,5,37,0,0,210,229,1,0,0,0,211,212,5,13,0,
		0,212,213,5,32,0,0,213,214,3,40,20,0,214,215,5,33,0,0,215,216,5,36,0,0,
		216,217,3,24,12,0,217,218,5,37,0,0,218,229,1,0,0,0,219,220,5,14,0,0,220,
		221,5,36,0,0,221,222,3,24,12,0,222,223,5,37,0,0,223,224,5,13,0,0,224,225,
		5,32,0,0,225,226,3,40,20,0,226,227,5,33,0,0,227,229,1,0,0,0,228,199,1,
		0,0,0,228,211,1,0,0,0,228,219,1,0,0,0,229,33,1,0,0,0,230,231,5,20,0,0,
		231,237,5,6,0,0,232,233,5,20,0,0,233,234,3,38,19,0,234,235,5,6,0,0,235,
		237,1,0,0,0,236,230,1,0,0,0,236,232,1,0,0,0,237,35,1,0,0,0,238,239,5,18,
		0,0,239,240,5,6,0,0,240,37,1,0,0,0,241,242,3,64,32,0,242,243,5,49,0,0,
		243,244,3,38,19,0,244,275,1,0,0,0,245,246,3,64,32,0,246,247,5,43,0,0,247,
		248,3,38,19,0,248,275,1,0,0,0,249,250,3,64,32,0,250,251,5,44,0,0,251,252,
		3,38,19,0,252,275,1,0,0,0,253,254,3,64,32,0,254,255,5,45,0,0,255,256,3,
		38,19,0,256,275,1,0,0,0,257,258,3,64,32,0,258,259,5,46,0,0,259,260,3,38,
		19,0,260,275,1,0,0,0,261,262,3,64,32,0,262,263,5,41,0,0,263,275,1,0,0,
		0,264,265,3,64,32,0,265,266,5,42,0,0,266,275,1,0,0,0,267,275,3,40,20,0,
		268,275,3,50,25,0,269,275,3,8,4,0,270,271,3,8,4,0,271,272,5,49,0,0,272,
		273,3,38,19,0,273,275,1,0,0,0,274,241,1,0,0,0,274,245,1,0,0,0,274,249,
		1,0,0,0,274,253,1,0,0,0,274,257,1,0,0,0,274,261,1,0,0,0,274,264,1,0,0,
		0,274,267,1,0,0,0,274,268,1,0,0,0,274,269,1,0,0,0,274,270,1,0,0,0,275,
		39,1,0,0,0,276,277,6,20,-1,0,277,278,3,42,21,0,278,284,1,0,0,0,279,280,
		10,2,0,0,280,281,5,58,0,0,281,283,3,42,21,0,282,279,1,0,0,0,283,286,1,
		0,0,0,284,282,1,0,0,0,284,285,1,0,0,0,285,41,1,0,0,0,286,284,1,0,0,0,287,
		288,6,21,-1,0,288,289,3,44,22,0,289,295,1,0,0,0,290,291,10,2,0,0,291,292,
		5,57,0,0,292,294,3,44,22,0,293,290,1,0,0,0,294,297,1,0,0,0,295,293,1,0,
		0,0,295,296,1,0,0,0,296,43,1,0,0,0,297,295,1,0,0,0,298,299,5,59,0,0,299,
		302,3,44,22,0,300,302,3,46,23,0,301,298,1,0,0,0,301,300,1,0,0,0,302,45,
		1,0,0,0,303,304,3,50,25,0,304,305,3,48,24,0,305,306,3,50,25,0,306,47,1,
		0,0,0,307,308,7,1,0,0,308,49,1,0,0,0,309,310,6,25,-1,0,310,311,3,54,27,
		0,311,318,1,0,0,0,312,313,10,2,0,0,313,314,3,52,26,0,314,315,3,54,27,0,
		315,317,1,0,0,0,316,312,1,0,0,0,317,320,1,0,0,0,318,316,1,0,0,0,318,319,
		1,0,0,0,319,51,1,0,0,0,320,318,1,0,0,0,321,322,7,2,0,0,322,53,1,0,0,0,
		323,324,6,27,-1,0,324,325,3,58,29,0,325,332,1,0,0,0,326,327,10,2,0,0,327,
		328,3,56,28,0,328,329,3,58,29,0,329,331,1,0,0,0,330,326,1,0,0,0,331,334,
		1,0,0,0,332,330,1,0,0,0,332,333,1,0,0,0,333,55,1,0,0,0,334,332,1,0,0,0,
		335,336,7,3,0,0,336,57,1,0,0,0,337,338,3,60,30,0,338,339,3,58,29,0,339,
		342,1,0,0,0,340,342,3,62,31,0,341,337,1,0,0,0,341,340,1,0,0,0,342,59,1,
		0,0,0,343,344,7,2,0,0,344,61,1,0,0,0,345,348,3,64,32,0,346,348,3,66,33,
		0,347,345,1,0,0,0,347,346,1,0,0,0,348,63,1,0,0,0,349,356,5,62,0,0,350,
		351,5,62,0,0,351,352,5,34,0,0,352,353,3,76,38,0,353,354,5,35,0,0,354,356,
		1,0,0,0,355,349,1,0,0,0,355,350,1,0,0,0,356,65,1,0,0,0,357,366,3,82,41,
		0,358,366,3,80,40,0,359,366,3,76,38,0,360,366,3,84,42,0,361,362,5,34,0,
		0,362,363,3,68,34,0,363,364,5,35,0,0,364,366,1,0,0,0,365,357,1,0,0,0,365,
		358,1,0,0,0,365,359,1,0,0,0,365,360,1,0,0,0,365,361,1,0,0,0,366,67,1,0,
		0,0,367,370,3,70,35,0,368,370,1,0,0,0,369,367,1,0,0,0,369,368,1,0,0,0,
		370,69,1,0,0,0,371,372,6,35,-1,0,372,373,3,66,33,0,373,379,1,0,0,0,374,
		375,10,2,0,0,375,376,5,40,0,0,376,378,3,66,33,0,377,374,1,0,0,0,378,381,
		1,0,0,0,379,377,1,0,0,0,379,380,1,0,0,0,380,71,1,0,0,0,381,379,1,0,0,0,
		382,384,5,29,0,0,383,382,1,0,0,0,384,385,1,0,0,0,385,383,1,0,0,0,385,386,
		1,0,0,0,386,390,1,0,0,0,387,389,5,28,0,0,388,387,1,0,0,0,389,392,1,0,0,
		0,390,388,1,0,0,0,390,391,1,0,0,0,391,396,1,0,0,0,392,390,1,0,0,0,393,
		395,5,27,0,0,394,393,1,0,0,0,395,398,1,0,0,0,396,394,1,0,0,0,396,397,1,
		0,0,0,397,400,1,0,0,0,398,396,1,0,0,0,399,401,5,21,0,0,400,399,1,0,0,0,
		400,401,1,0,0,0,401,403,1,0,0,0,402,404,5,22,0,0,403,402,1,0,0,0,403,404,
		1,0,0,0,404,406,1,0,0,0,405,407,5,23,0,0,406,405,1,0,0,0,406,407,1,0,0,
		0,407,409,1,0,0,0,408,410,5,24,0,0,409,408,1,0,0,0,409,410,1,0,0,0,410,
		474,1,0,0,0,411,413,5,28,0,0,412,411,1,0,0,0,413,414,1,0,0,0,414,412,1,
		0,0,0,414,415,1,0,0,0,415,419,1,0,0,0,416,418,5,27,0,0,417,416,1,0,0,0,
		418,421,1,0,0,0,419,417,1,0,0,0,419,420,1,0,0,0,420,423,1,0,0,0,421,419,
		1,0,0,0,422,424,5,21,0,0,423,422,1,0,0,0,423,424,1,0,0,0,424,426,1,0,0,
		0,425,427,5,22,0,0,426,425,1,0,0,0,426,427,1,0,0,0,427,429,1,0,0,0,428,
		430,5,23,0,0,429,428,1,0,0,0,429,430,1,0,0,0,430,432,1,0,0,0,431,433,5,
		24,0,0,432,431,1,0,0,0,432,433,1,0,0,0,433,474,1,0,0,0,434,436,5,27,0,
		0,435,434,1,0,0,0,436,437,1,0,0,0,437,435,1,0,0,0,437,438,1,0,0,0,438,
		440,1,0,0,0,439,441,5,21,0,0,440,439,1,0,0,0,440,441,1,0,0,0,441,443,1,
		0,0,0,442,444,5,22,0,0,443,442,1,0,0,0,443,444,1,0,0,0,444,446,1,0,0,0,
		445,447,5,23,0,0,446,445,1,0,0,0,446,447,1,0,0,0,447,449,1,0,0,0,448,450,
		5,24,0,0,449,448,1,0,0,0,449,450,1,0,0,0,450,474,1,0,0,0,451,453,5,21,
		0,0,452,454,5,22,0,0,453,452,1,0,0,0,453,454,1,0,0,0,454,456,1,0,0,0,455,
		457,5,23,0,0,456,455,1,0,0,0,456,457,1,0,0,0,457,459,1,0,0,0,458,460,5,
		24,0,0,459,458,1,0,0,0,459,460,1,0,0,0,460,474,1,0,0,0,461,463,5,22,0,
		0,462,464,5,23,0,0,463,462,1,0,0,0,463,464,1,0,0,0,464,466,1,0,0,0,465,
		467,5,24,0,0,466,465,1,0,0,0,466,467,1,0,0,0,467,474,1,0,0,0,468,470,5,
		23,0,0,469,471,5,24,0,0,470,469,1,0,0,0,470,471,1,0,0,0,471,474,1,0,0,
		0,472,474,5,24,0,0,473,383,1,0,0,0,473,412,1,0,0,0,473,435,1,0,0,0,473,
		451,1,0,0,0,473,461,1,0,0,0,473,468,1,0,0,0,473,472,1,0,0,0,474,73,1,0,
		0,0,475,476,5,26,0,0,476,477,3,72,36,0,477,75,1,0,0,0,478,484,5,25,0,0,
		479,484,3,72,36,0,480,481,3,72,36,0,481,482,3,78,39,0,482,484,1,0,0,0,
		483,478,1,0,0,0,483,479,1,0,0,0,483,480,1,0,0,0,484,77,1,0,0,0,485,486,
		6,39,-1,0,486,487,3,74,37,0,487,492,1,0,0,0,488,489,10,2,0,0,489,491,3,
		74,37,0,490,488,1,0,0,0,491,494,1,0,0,0,492,490,1,0,0,0,492,493,1,0,0,
		0,493,79,1,0,0,0,494,492,1,0,0,0,495,496,5,2,0,0,496,81,1,0,0,0,497,498,
		5,3,0,0,498,83,1,0,0,0,499,500,7,4,0,0,500,85,1,0,0,0,52,90,103,110,119,
		134,138,148,156,165,175,197,228,236,274,284,295,301,318,332,341,347,355,
		365,369,379,385,390,396,400,403,406,409,414,419,423,426,429,432,437,440,
		443,446,449,453,456,459,463,466,470,473,483,492
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
