//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.10.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from C:/Users/bartt/source/repos/BartlomiejLac/IsisPapyrus/IsisPapyrus/Grammar\IsisParser.g4 by ANTLR 4.10.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.10.1")]
[System.CLSCompliant(false)]
public partial class IsisParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		LINECOMMENT=1, CHARCONST=2, STRINGCONST=3, PROGRAMSTART=4, PROGRAMEND=5, 
		INSTRUCTIONEND=6, VOID=7, CHAR=8, INT=9, BOOL=10, FRACTIONAL=11, STRING=12, 
		WHILE=13, DO=14, FOR=15, IF=16, ELSE=17, BREAK=18, CONTINUE=19, RETURN=20, 
		NUMBERCONST=21, BOOLCONST=22, LEFTPAREN=23, RIGHTPAREN=24, LEFTBRACKET=25, 
		RIGHTBRACKET=26, LEFTBRACE=27, RIGHTBRACE=28, SINGLEQUOTE=29, DOUBLEQUOTE=30, 
		COMMA=31, INCREMENT=32, DECREMENT=33, INCREMENTBY=34, DECREMENTBY=35, 
		MULTIPLYBY=36, DIVIDEBY=37, PLUS=38, MINUS=39, ASSIGN=40, MULTSYMBOL=41, 
		DIVSYMBOL=42, MODSYMBOL=43, GREATEREQUAL=44, LESSEREQUAL=45, NOTEQUALS=46, 
		EQUALS=47, AND=48, OR=49, NOT=50, GREATER=51, LESSER=52, IDENTIFIER=53, 
		WHITESPACE=54, NEWLINE=55, UNRECOGNIZED=56;
	public const int
		RULE_program = 0, RULE_declarations = 1, RULE_mainFunction = 2, RULE_declarationList = 3, 
		RULE_declaration = 4, RULE_declarationVariable = 5, RULE_variableName = 6, 
		RULE_type = 7, RULE_declarationFunc = 8, RULE_functionType = 9, RULE_arguments = 10, 
		RULE_argumentsList = 11, RULE_argument = 12, RULE_instructions = 13, RULE_instructionsList = 14, 
		RULE_instruction = 15, RULE_instructionIf = 16, RULE_instructionLoop = 17, 
		RULE_instructionReturn = 18, RULE_instructionBreak = 19, RULE_expression = 20, 
		RULE_boolExpression = 21, RULE_andExpression = 22, RULE_notExpression = 23, 
		RULE_compareExpression = 24, RULE_compareOperator = 25, RULE_sumExpression = 26, 
		RULE_sumOperator = 27, RULE_multExpression = 28, RULE_multOperator = 29, 
		RULE_unaryExpression = 30, RULE_unaryOperator = 31, RULE_factor = 32, 
		RULE_variable = 33, RULE_constant = 34, RULE_constants = 35, RULE_constantList = 36;
	public static readonly string[] ruleNames = {
		"program", "declarations", "mainFunction", "declarationList", "declaration", 
		"declarationVariable", "variableName", "type", "declarationFunc", "functionType", 
		"arguments", "argumentsList", "argument", "instructions", "instructionsList", 
		"instruction", "instructionIf", "instructionLoop", "instructionReturn", 
		"instructionBreak", "expression", "boolExpression", "andExpression", "notExpression", 
		"compareExpression", "compareOperator", "sumExpression", "sumOperator", 
		"multExpression", "multOperator", "unaryExpression", "unaryOperator", 
		"factor", "variable", "constant", "constants", "constantList"
	};

	private static readonly string[] _LiteralNames = {
		null, null, null, null, "'\\U00013080'", "'\\U0001314A'", "'\\U000132F9'", 
		"'\\U0001316F'", "'\\U000130DC'", "'\\U000130D5'", "'\\U000130D2'", "'\\U000130F2'", 
		"'\\U000130EF'", "'\\U00013133'", "'\\U00013136'", "'\\U00013138'", "'\\U00013038'", 
		"'\\U000131A3'", "'\\U000130BF'", "'\\U00013216'", "'\\U000130C2'", null, 
		null, "'\\U00013023'", "'\\U00013022'", "'\\U00013024'", "'\\U00013025'", 
		"'\\U00013020'", "'\\U00013021'", "'\\U000132FE'", "'\\U0001339B'", "'\\U000133F0'", 
		null, null, null, null, null, null, "'\\U000130BD'", "'\\U000130BB'", 
		"'\\U0001335D'", "'\\U00013188'", "'\\U000133F5'", "'\\U000132AD'", null, 
		null, null, "'\\U0001339A'", "'\\U00013093'", "'\\U00013098'", "'\\U0001309C'", 
		"'\\U00013287'", "'\\U00013286'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "LINECOMMENT", "CHARCONST", "STRINGCONST", "PROGRAMSTART", "PROGRAMEND", 
		"INSTRUCTIONEND", "VOID", "CHAR", "INT", "BOOL", "FRACTIONAL", "STRING", 
		"WHILE", "DO", "FOR", "IF", "ELSE", "BREAK", "CONTINUE", "RETURN", "NUMBERCONST", 
		"BOOLCONST", "LEFTPAREN", "RIGHTPAREN", "LEFTBRACKET", "RIGHTBRACKET", 
		"LEFTBRACE", "RIGHTBRACE", "SINGLEQUOTE", "DOUBLEQUOTE", "COMMA", "INCREMENT", 
		"DECREMENT", "INCREMENTBY", "DECREMENTBY", "MULTIPLYBY", "DIVIDEBY", "PLUS", 
		"MINUS", "ASSIGN", "MULTSYMBOL", "DIVSYMBOL", "MODSYMBOL", "GREATEREQUAL", 
		"LESSEREQUAL", "NOTEQUALS", "EQUALS", "AND", "OR", "NOT", "GREATER", "LESSER", 
		"IDENTIFIER", "WHITESPACE", "NEWLINE", "UNRECOGNIZED"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "IsisParser.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static IsisParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public IsisParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public IsisParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class ProgramContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public DeclarationsContext declarations() {
			return GetRuleContext<DeclarationsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public MainFunctionContext mainFunction() {
			return GetRuleContext<MainFunctionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Eof() { return GetToken(IsisParser.Eof, 0); }
		public ProgramContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_program; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IIsisParserListener typedListener = listener as IIsisParserListener;
			if (typedListener != null) typedListener.EnterProgram(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IIsisParserListener typedListener = listener as IIsisParserListener;
			if (typedListener != null) typedListener.ExitProgram(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IIsisParserVisitor<TResult> typedVisitor = visitor as IIsisParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitProgram(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ProgramContext program() {
		ProgramContext _localctx = new ProgramContext(Context, State);
		EnterRule(_localctx, 0, RULE_program);
		try {
			State = 81;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,0,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 74;
				declarations();
				State = 75;
				mainFunction();
				State = 76;
				Match(Eof);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 78;
				declarations();
				State = 79;
				Match(Eof);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DeclarationsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public DeclarationListContext declarationList() {
			return GetRuleContext<DeclarationListContext>(0);
		}
		public DeclarationsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_declarations; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IIsisParserListener typedListener = listener as IIsisParserListener;
			if (typedListener != null) typedListener.EnterDeclarations(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IIsisParserListener typedListener = listener as IIsisParserListener;
			if (typedListener != null) typedListener.ExitDeclarations(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IIsisParserVisitor<TResult> typedVisitor = visitor as IIsisParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDeclarations(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DeclarationsContext declarations() {
		DeclarationsContext _localctx = new DeclarationsContext(Context, State);
		EnterRule(_localctx, 2, RULE_declarations);
		try {
			State = 85;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case VOID:
			case CHAR:
			case INT:
			case FRACTIONAL:
			case STRING:
				EnterOuterAlt(_localctx, 1);
				{
				State = 83;
				declarationList(0);
				}
				break;
			case Eof:
			case PROGRAMSTART:
				EnterOuterAlt(_localctx, 2);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MainFunctionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PROGRAMSTART() { return GetToken(IsisParser.PROGRAMSTART, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public InstructionsContext instructions() {
			return GetRuleContext<InstructionsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PROGRAMEND() { return GetToken(IsisParser.PROGRAMEND, 0); }
		public MainFunctionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_mainFunction; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IIsisParserListener typedListener = listener as IIsisParserListener;
			if (typedListener != null) typedListener.EnterMainFunction(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IIsisParserListener typedListener = listener as IIsisParserListener;
			if (typedListener != null) typedListener.ExitMainFunction(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IIsisParserVisitor<TResult> typedVisitor = visitor as IIsisParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMainFunction(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MainFunctionContext mainFunction() {
		MainFunctionContext _localctx = new MainFunctionContext(Context, State);
		EnterRule(_localctx, 4, RULE_mainFunction);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 87;
			Match(PROGRAMSTART);
			State = 88;
			instructions();
			State = 89;
			Match(PROGRAMEND);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DeclarationListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public DeclarationContext declaration() {
			return GetRuleContext<DeclarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DeclarationListContext declarationList() {
			return GetRuleContext<DeclarationListContext>(0);
		}
		public DeclarationListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_declarationList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IIsisParserListener typedListener = listener as IIsisParserListener;
			if (typedListener != null) typedListener.EnterDeclarationList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IIsisParserListener typedListener = listener as IIsisParserListener;
			if (typedListener != null) typedListener.ExitDeclarationList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IIsisParserVisitor<TResult> typedVisitor = visitor as IIsisParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDeclarationList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DeclarationListContext declarationList() {
		return declarationList(0);
	}

	private DeclarationListContext declarationList(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		DeclarationListContext _localctx = new DeclarationListContext(Context, _parentState);
		DeclarationListContext _prevctx = _localctx;
		int _startState = 6;
		EnterRecursionRule(_localctx, 6, RULE_declarationList, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 92;
			declaration();
			}
			Context.Stop = TokenStream.LT(-1);
			State = 98;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,2,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new DeclarationListContext(_parentctx, _parentState);
					PushNewRecursionContext(_localctx, _startState, RULE_declarationList);
					State = 94;
					if (!(Precpred(Context, 2))) throw new FailedPredicateException(this, "Precpred(Context, 2)");
					State = 95;
					declaration();
					}
					} 
				}
				State = 100;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,2,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class DeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public DeclarationVariableContext declarationVariable() {
			return GetRuleContext<DeclarationVariableContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INSTRUCTIONEND() { return GetToken(IsisParser.INSTRUCTIONEND, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public DeclarationFuncContext declarationFunc() {
			return GetRuleContext<DeclarationFuncContext>(0);
		}
		public DeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_declaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IIsisParserListener typedListener = listener as IIsisParserListener;
			if (typedListener != null) typedListener.EnterDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IIsisParserListener typedListener = listener as IIsisParserListener;
			if (typedListener != null) typedListener.ExitDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IIsisParserVisitor<TResult> typedVisitor = visitor as IIsisParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DeclarationContext declaration() {
		DeclarationContext _localctx = new DeclarationContext(Context, State);
		EnterRule(_localctx, 8, RULE_declaration);
		try {
			State = 105;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,3,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 101;
				declarationVariable();
				State = 102;
				Match(INSTRUCTIONEND);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 104;
				declarationFunc();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DeclarationVariableContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public VariableNameContext variableName() {
			return GetRuleContext<VariableNameContext>(0);
		}
		public DeclarationVariableContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_declarationVariable; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IIsisParserListener typedListener = listener as IIsisParserListener;
			if (typedListener != null) typedListener.EnterDeclarationVariable(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IIsisParserListener typedListener = listener as IIsisParserListener;
			if (typedListener != null) typedListener.ExitDeclarationVariable(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IIsisParserVisitor<TResult> typedVisitor = visitor as IIsisParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDeclarationVariable(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DeclarationVariableContext declarationVariable() {
		DeclarationVariableContext _localctx = new DeclarationVariableContext(Context, State);
		EnterRule(_localctx, 10, RULE_declarationVariable);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 107;
			type();
			State = 108;
			variableName();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VariableNameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(IsisParser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEFTBRACKET() { return GetToken(IsisParser.LEFTBRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RIGHTBRACKET() { return GetToken(IsisParser.RIGHTBRACKET, 0); }
		public VariableNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_variableName; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IIsisParserListener typedListener = listener as IIsisParserListener;
			if (typedListener != null) typedListener.EnterVariableName(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IIsisParserListener typedListener = listener as IIsisParserListener;
			if (typedListener != null) typedListener.ExitVariableName(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IIsisParserVisitor<TResult> typedVisitor = visitor as IIsisParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVariableName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VariableNameContext variableName() {
		VariableNameContext _localctx = new VariableNameContext(Context, State);
		EnterRule(_localctx, 12, RULE_variableName);
		try {
			State = 114;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,4,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 110;
				Match(IDENTIFIER);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 111;
				Match(IDENTIFIER);
				State = 112;
				Match(LEFTBRACKET);
				State = 113;
				Match(RIGHTBRACKET);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INT() { return GetToken(IsisParser.INT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FRACTIONAL() { return GetToken(IsisParser.FRACTIONAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CHAR() { return GetToken(IsisParser.CHAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING() { return GetToken(IsisParser.STRING, 0); }
		public TypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_type; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IIsisParserListener typedListener = listener as IIsisParserListener;
			if (typedListener != null) typedListener.EnterType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IIsisParserListener typedListener = listener as IIsisParserListener;
			if (typedListener != null) typedListener.ExitType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IIsisParserVisitor<TResult> typedVisitor = visitor as IIsisParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeContext type() {
		TypeContext _localctx = new TypeContext(Context, State);
		EnterRule(_localctx, 14, RULE_type);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 116;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << CHAR) | (1L << INT) | (1L << FRACTIONAL) | (1L << STRING))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DeclarationFuncContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public FunctionTypeContext functionType() {
			return GetRuleContext<FunctionTypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(IsisParser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEFTPAREN() { return GetToken(IsisParser.LEFTPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ArgumentsContext arguments() {
			return GetRuleContext<ArgumentsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RIGHTPAREN() { return GetToken(IsisParser.RIGHTPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEFTBRACE() { return GetToken(IsisParser.LEFTBRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public InstructionsListContext instructionsList() {
			return GetRuleContext<InstructionsListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RIGHTBRACE() { return GetToken(IsisParser.RIGHTBRACE, 0); }
		public DeclarationFuncContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_declarationFunc; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IIsisParserListener typedListener = listener as IIsisParserListener;
			if (typedListener != null) typedListener.EnterDeclarationFunc(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IIsisParserListener typedListener = listener as IIsisParserListener;
			if (typedListener != null) typedListener.ExitDeclarationFunc(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IIsisParserVisitor<TResult> typedVisitor = visitor as IIsisParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDeclarationFunc(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DeclarationFuncContext declarationFunc() {
		DeclarationFuncContext _localctx = new DeclarationFuncContext(Context, State);
		EnterRule(_localctx, 16, RULE_declarationFunc);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 118;
			functionType();
			State = 119;
			Match(IDENTIFIER);
			State = 120;
			Match(LEFTPAREN);
			State = 121;
			arguments();
			State = 122;
			Match(RIGHTPAREN);
			State = 123;
			Match(LEFTBRACE);
			State = 124;
			instructionsList(0);
			State = 125;
			Match(RIGHTBRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionTypeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VOID() { return GetToken(IsisParser.VOID, 0); }
		public FunctionTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionType; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IIsisParserListener typedListener = listener as IIsisParserListener;
			if (typedListener != null) typedListener.EnterFunctionType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IIsisParserListener typedListener = listener as IIsisParserListener;
			if (typedListener != null) typedListener.ExitFunctionType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IIsisParserVisitor<TResult> typedVisitor = visitor as IIsisParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctionType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunctionTypeContext functionType() {
		FunctionTypeContext _localctx = new FunctionTypeContext(Context, State);
		EnterRule(_localctx, 18, RULE_functionType);
		try {
			State = 129;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case CHAR:
			case INT:
			case FRACTIONAL:
			case STRING:
				EnterOuterAlt(_localctx, 1);
				{
				State = 127;
				type();
				}
				break;
			case VOID:
				EnterOuterAlt(_localctx, 2);
				{
				State = 128;
				Match(VOID);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArgumentsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ArgumentsListContext argumentsList() {
			return GetRuleContext<ArgumentsListContext>(0);
		}
		public ArgumentsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_arguments; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IIsisParserListener typedListener = listener as IIsisParserListener;
			if (typedListener != null) typedListener.EnterArguments(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IIsisParserListener typedListener = listener as IIsisParserListener;
			if (typedListener != null) typedListener.ExitArguments(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IIsisParserVisitor<TResult> typedVisitor = visitor as IIsisParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArguments(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArgumentsContext arguments() {
		ArgumentsContext _localctx = new ArgumentsContext(Context, State);
		EnterRule(_localctx, 20, RULE_arguments);
		try {
			State = 133;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case CHAR:
			case INT:
			case FRACTIONAL:
			case STRING:
				EnterOuterAlt(_localctx, 1);
				{
				State = 131;
				argumentsList(0);
				}
				break;
			case RIGHTPAREN:
				EnterOuterAlt(_localctx, 2);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArgumentsListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ArgumentContext argument() {
			return GetRuleContext<ArgumentContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ArgumentsListContext argumentsList() {
			return GetRuleContext<ArgumentsListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA() { return GetToken(IsisParser.COMMA, 0); }
		public ArgumentsListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_argumentsList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IIsisParserListener typedListener = listener as IIsisParserListener;
			if (typedListener != null) typedListener.EnterArgumentsList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IIsisParserListener typedListener = listener as IIsisParserListener;
			if (typedListener != null) typedListener.ExitArgumentsList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IIsisParserVisitor<TResult> typedVisitor = visitor as IIsisParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArgumentsList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArgumentsListContext argumentsList() {
		return argumentsList(0);
	}

	private ArgumentsListContext argumentsList(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		ArgumentsListContext _localctx = new ArgumentsListContext(Context, _parentState);
		ArgumentsListContext _prevctx = _localctx;
		int _startState = 22;
		EnterRecursionRule(_localctx, 22, RULE_argumentsList, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 136;
			argument();
			}
			Context.Stop = TokenStream.LT(-1);
			State = 143;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,7,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new ArgumentsListContext(_parentctx, _parentState);
					PushNewRecursionContext(_localctx, _startState, RULE_argumentsList);
					State = 138;
					if (!(Precpred(Context, 2))) throw new FailedPredicateException(this, "Precpred(Context, 2)");
					State = 139;
					Match(COMMA);
					State = 140;
					argument();
					}
					} 
				}
				State = 145;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,7,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class ArgumentContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public VariableNameContext variableName() {
			return GetRuleContext<VariableNameContext>(0);
		}
		public ArgumentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_argument; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IIsisParserListener typedListener = listener as IIsisParserListener;
			if (typedListener != null) typedListener.EnterArgument(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IIsisParserListener typedListener = listener as IIsisParserListener;
			if (typedListener != null) typedListener.ExitArgument(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IIsisParserVisitor<TResult> typedVisitor = visitor as IIsisParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArgument(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArgumentContext argument() {
		ArgumentContext _localctx = new ArgumentContext(Context, State);
		EnterRule(_localctx, 24, RULE_argument);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 146;
			type();
			State = 147;
			variableName();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InstructionsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public InstructionsListContext instructionsList() {
			return GetRuleContext<InstructionsListContext>(0);
		}
		public InstructionsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_instructions; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IIsisParserListener typedListener = listener as IIsisParserListener;
			if (typedListener != null) typedListener.EnterInstructions(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IIsisParserListener typedListener = listener as IIsisParserListener;
			if (typedListener != null) typedListener.ExitInstructions(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IIsisParserVisitor<TResult> typedVisitor = visitor as IIsisParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInstructions(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public InstructionsContext instructions() {
		InstructionsContext _localctx = new InstructionsContext(Context, State);
		EnterRule(_localctx, 26, RULE_instructions);
		try {
			State = 151;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case CHARCONST:
			case STRINGCONST:
			case CHAR:
			case INT:
			case FRACTIONAL:
			case STRING:
			case WHILE:
			case DO:
			case FOR:
			case IF:
			case BREAK:
			case RETURN:
			case NUMBERCONST:
			case BOOLCONST:
			case LEFTBRACKET:
			case PLUS:
			case MINUS:
			case NOT:
			case IDENTIFIER:
				EnterOuterAlt(_localctx, 1);
				{
				State = 149;
				instructionsList(0);
				}
				break;
			case PROGRAMEND:
			case RIGHTBRACE:
				EnterOuterAlt(_localctx, 2);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InstructionsListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public InstructionContext instruction() {
			return GetRuleContext<InstructionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public InstructionsListContext instructionsList() {
			return GetRuleContext<InstructionsListContext>(0);
		}
		public InstructionsListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_instructionsList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IIsisParserListener typedListener = listener as IIsisParserListener;
			if (typedListener != null) typedListener.EnterInstructionsList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IIsisParserListener typedListener = listener as IIsisParserListener;
			if (typedListener != null) typedListener.ExitInstructionsList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IIsisParserVisitor<TResult> typedVisitor = visitor as IIsisParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInstructionsList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public InstructionsListContext instructionsList() {
		return instructionsList(0);
	}

	private InstructionsListContext instructionsList(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		InstructionsListContext _localctx = new InstructionsListContext(Context, _parentState);
		InstructionsListContext _prevctx = _localctx;
		int _startState = 28;
		EnterRecursionRule(_localctx, 28, RULE_instructionsList, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 154;
			instruction();
			}
			Context.Stop = TokenStream.LT(-1);
			State = 160;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,9,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new InstructionsListContext(_parentctx, _parentState);
					PushNewRecursionContext(_localctx, _startState, RULE_instructionsList);
					State = 156;
					if (!(Precpred(Context, 2))) throw new FailedPredicateException(this, "Precpred(Context, 2)");
					State = 157;
					instruction();
					}
					} 
				}
				State = 162;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,9,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class InstructionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INSTRUCTIONEND() { return GetToken(IsisParser.INSTRUCTIONEND, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public InstructionIfContext instructionIf() {
			return GetRuleContext<InstructionIfContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public InstructionLoopContext instructionLoop() {
			return GetRuleContext<InstructionLoopContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public InstructionReturnContext instructionReturn() {
			return GetRuleContext<InstructionReturnContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public InstructionBreakContext instructionBreak() {
			return GetRuleContext<InstructionBreakContext>(0);
		}
		public InstructionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_instruction; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IIsisParserListener typedListener = listener as IIsisParserListener;
			if (typedListener != null) typedListener.EnterInstruction(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IIsisParserListener typedListener = listener as IIsisParserListener;
			if (typedListener != null) typedListener.ExitInstruction(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IIsisParserVisitor<TResult> typedVisitor = visitor as IIsisParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInstruction(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public InstructionContext instruction() {
		InstructionContext _localctx = new InstructionContext(Context, State);
		EnterRule(_localctx, 30, RULE_instruction);
		try {
			State = 170;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case CHARCONST:
			case STRINGCONST:
			case CHAR:
			case INT:
			case FRACTIONAL:
			case STRING:
			case NUMBERCONST:
			case BOOLCONST:
			case LEFTBRACKET:
			case PLUS:
			case MINUS:
			case NOT:
			case IDENTIFIER:
				EnterOuterAlt(_localctx, 1);
				{
				State = 163;
				expression();
				State = 164;
				Match(INSTRUCTIONEND);
				}
				break;
			case IF:
				EnterOuterAlt(_localctx, 2);
				{
				State = 166;
				instructionIf();
				}
				break;
			case WHILE:
			case DO:
			case FOR:
				EnterOuterAlt(_localctx, 3);
				{
				State = 167;
				instructionLoop();
				}
				break;
			case RETURN:
				EnterOuterAlt(_localctx, 4);
				{
				State = 168;
				instructionReturn();
				}
				break;
			case BREAK:
				EnterOuterAlt(_localctx, 5);
				{
				State = 169;
				instructionBreak();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InstructionIfContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IF() { return GetToken(IsisParser.IF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEFTPAREN() { return GetToken(IsisParser.LEFTPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public BoolExpressionContext boolExpression() {
			return GetRuleContext<BoolExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RIGHTPAREN() { return GetToken(IsisParser.RIGHTPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] LEFTBRACE() { return GetTokens(IsisParser.LEFTBRACE); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEFTBRACE(int i) {
			return GetToken(IsisParser.LEFTBRACE, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public InstructionsContext[] instructions() {
			return GetRuleContexts<InstructionsContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public InstructionsContext instructions(int i) {
			return GetRuleContext<InstructionsContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] RIGHTBRACE() { return GetTokens(IsisParser.RIGHTBRACE); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RIGHTBRACE(int i) {
			return GetToken(IsisParser.RIGHTBRACE, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ELSE() { return GetToken(IsisParser.ELSE, 0); }
		public InstructionIfContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_instructionIf; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IIsisParserListener typedListener = listener as IIsisParserListener;
			if (typedListener != null) typedListener.EnterInstructionIf(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IIsisParserListener typedListener = listener as IIsisParserListener;
			if (typedListener != null) typedListener.ExitInstructionIf(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IIsisParserVisitor<TResult> typedVisitor = visitor as IIsisParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInstructionIf(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public InstructionIfContext instructionIf() {
		InstructionIfContext _localctx = new InstructionIfContext(Context, State);
		EnterRule(_localctx, 32, RULE_instructionIf);
		try {
			State = 192;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,11,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 172;
				Match(IF);
				State = 173;
				Match(LEFTPAREN);
				State = 174;
				boolExpression(0);
				State = 175;
				Match(RIGHTPAREN);
				State = 176;
				Match(LEFTBRACE);
				State = 177;
				instructions();
				State = 178;
				Match(RIGHTBRACE);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 180;
				Match(IF);
				State = 181;
				Match(LEFTPAREN);
				State = 182;
				boolExpression(0);
				State = 183;
				Match(RIGHTPAREN);
				State = 184;
				Match(LEFTBRACE);
				State = 185;
				instructions();
				State = 186;
				Match(RIGHTBRACE);
				State = 187;
				Match(ELSE);
				State = 188;
				Match(LEFTBRACE);
				State = 189;
				instructions();
				State = 190;
				Match(RIGHTBRACE);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InstructionLoopContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FOR() { return GetToken(IsisParser.FOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEFTPAREN() { return GetToken(IsisParser.LEFTPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] INSTRUCTIONEND() { return GetTokens(IsisParser.INSTRUCTIONEND); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INSTRUCTIONEND(int i) {
			return GetToken(IsisParser.INSTRUCTIONEND, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BoolExpressionContext boolExpression() {
			return GetRuleContext<BoolExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RIGHTPAREN() { return GetToken(IsisParser.RIGHTPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEFTBRACE() { return GetToken(IsisParser.LEFTBRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public InstructionsContext instructions() {
			return GetRuleContext<InstructionsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RIGHTBRACE() { return GetToken(IsisParser.RIGHTBRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WHILE() { return GetToken(IsisParser.WHILE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DO() { return GetToken(IsisParser.DO, 0); }
		public InstructionLoopContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_instructionLoop; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IIsisParserListener typedListener = listener as IIsisParserListener;
			if (typedListener != null) typedListener.EnterInstructionLoop(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IIsisParserListener typedListener = listener as IIsisParserListener;
			if (typedListener != null) typedListener.ExitInstructionLoop(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IIsisParserVisitor<TResult> typedVisitor = visitor as IIsisParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInstructionLoop(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public InstructionLoopContext instructionLoop() {
		InstructionLoopContext _localctx = new InstructionLoopContext(Context, State);
		EnterRule(_localctx, 34, RULE_instructionLoop);
		try {
			State = 223;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case FOR:
				EnterOuterAlt(_localctx, 1);
				{
				State = 194;
				Match(FOR);
				State = 195;
				Match(LEFTPAREN);
				State = 196;
				expression();
				State = 197;
				Match(INSTRUCTIONEND);
				State = 198;
				boolExpression(0);
				State = 199;
				Match(INSTRUCTIONEND);
				State = 200;
				expression();
				State = 201;
				Match(RIGHTPAREN);
				State = 202;
				Match(LEFTBRACE);
				State = 203;
				instructions();
				State = 204;
				Match(RIGHTBRACE);
				}
				break;
			case WHILE:
				EnterOuterAlt(_localctx, 2);
				{
				State = 206;
				Match(WHILE);
				State = 207;
				Match(LEFTPAREN);
				State = 208;
				boolExpression(0);
				State = 209;
				Match(RIGHTPAREN);
				State = 210;
				Match(LEFTBRACE);
				State = 211;
				instructions();
				State = 212;
				Match(RIGHTBRACE);
				}
				break;
			case DO:
				EnterOuterAlt(_localctx, 3);
				{
				State = 214;
				Match(DO);
				State = 215;
				Match(LEFTBRACE);
				State = 216;
				instructions();
				State = 217;
				Match(RIGHTBRACE);
				State = 218;
				Match(WHILE);
				State = 219;
				Match(LEFTPAREN);
				State = 220;
				boolExpression(0);
				State = 221;
				Match(RIGHTPAREN);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InstructionReturnContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RETURN() { return GetToken(IsisParser.RETURN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INSTRUCTIONEND() { return GetToken(IsisParser.INSTRUCTIONEND, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public InstructionReturnContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_instructionReturn; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IIsisParserListener typedListener = listener as IIsisParserListener;
			if (typedListener != null) typedListener.EnterInstructionReturn(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IIsisParserListener typedListener = listener as IIsisParserListener;
			if (typedListener != null) typedListener.ExitInstructionReturn(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IIsisParserVisitor<TResult> typedVisitor = visitor as IIsisParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInstructionReturn(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public InstructionReturnContext instructionReturn() {
		InstructionReturnContext _localctx = new InstructionReturnContext(Context, State);
		EnterRule(_localctx, 36, RULE_instructionReturn);
		try {
			State = 231;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,13,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 225;
				Match(RETURN);
				State = 226;
				Match(INSTRUCTIONEND);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 227;
				Match(RETURN);
				State = 228;
				expression();
				State = 229;
				Match(INSTRUCTIONEND);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InstructionBreakContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BREAK() { return GetToken(IsisParser.BREAK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INSTRUCTIONEND() { return GetToken(IsisParser.INSTRUCTIONEND, 0); }
		public InstructionBreakContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_instructionBreak; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IIsisParserListener typedListener = listener as IIsisParserListener;
			if (typedListener != null) typedListener.EnterInstructionBreak(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IIsisParserListener typedListener = listener as IIsisParserListener;
			if (typedListener != null) typedListener.ExitInstructionBreak(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IIsisParserVisitor<TResult> typedVisitor = visitor as IIsisParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInstructionBreak(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public InstructionBreakContext instructionBreak() {
		InstructionBreakContext _localctx = new InstructionBreakContext(Context, State);
		EnterRule(_localctx, 38, RULE_instructionBreak);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 233;
			Match(BREAK);
			State = 234;
			Match(INSTRUCTIONEND);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public VariableContext variable() {
			return GetRuleContext<VariableContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASSIGN() { return GetToken(IsisParser.ASSIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INCREMENTBY() { return GetToken(IsisParser.INCREMENTBY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DECREMENTBY() { return GetToken(IsisParser.DECREMENTBY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MULTIPLYBY() { return GetToken(IsisParser.MULTIPLYBY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DIVIDEBY() { return GetToken(IsisParser.DIVIDEBY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INCREMENT() { return GetToken(IsisParser.INCREMENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DECREMENT() { return GetToken(IsisParser.DECREMENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public BoolExpressionContext boolExpression() {
			return GetRuleContext<BoolExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SumExpressionContext sumExpression() {
			return GetRuleContext<SumExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DeclarationVariableContext declarationVariable() {
			return GetRuleContext<DeclarationVariableContext>(0);
		}
		public ExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IIsisParserListener typedListener = listener as IIsisParserListener;
			if (typedListener != null) typedListener.EnterExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IIsisParserListener typedListener = listener as IIsisParserListener;
			if (typedListener != null) typedListener.ExitExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IIsisParserVisitor<TResult> typedVisitor = visitor as IIsisParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionContext expression() {
		ExpressionContext _localctx = new ExpressionContext(Context, State);
		EnterRule(_localctx, 40, RULE_expression);
		try {
			State = 269;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,14,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 236;
				variable();
				State = 237;
				Match(ASSIGN);
				State = 238;
				expression();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 240;
				variable();
				State = 241;
				Match(INCREMENTBY);
				State = 242;
				expression();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 244;
				variable();
				State = 245;
				Match(DECREMENTBY);
				State = 246;
				expression();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 248;
				variable();
				State = 249;
				Match(MULTIPLYBY);
				State = 250;
				expression();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 252;
				variable();
				State = 253;
				Match(DIVIDEBY);
				State = 254;
				expression();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 256;
				variable();
				State = 257;
				Match(INCREMENT);
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 259;
				variable();
				State = 260;
				Match(DECREMENT);
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 262;
				boolExpression(0);
				}
				break;
			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 263;
				sumExpression(0);
				}
				break;
			case 10:
				EnterOuterAlt(_localctx, 10);
				{
				State = 264;
				declarationVariable();
				}
				break;
			case 11:
				EnterOuterAlt(_localctx, 11);
				{
				State = 265;
				declarationVariable();
				State = 266;
				Match(ASSIGN);
				State = 267;
				expression();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BoolExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public AndExpressionContext andExpression() {
			return GetRuleContext<AndExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BoolExpressionContext boolExpression() {
			return GetRuleContext<BoolExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OR() { return GetToken(IsisParser.OR, 0); }
		public BoolExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_boolExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IIsisParserListener typedListener = listener as IIsisParserListener;
			if (typedListener != null) typedListener.EnterBoolExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IIsisParserListener typedListener = listener as IIsisParserListener;
			if (typedListener != null) typedListener.ExitBoolExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IIsisParserVisitor<TResult> typedVisitor = visitor as IIsisParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBoolExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BoolExpressionContext boolExpression() {
		return boolExpression(0);
	}

	private BoolExpressionContext boolExpression(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		BoolExpressionContext _localctx = new BoolExpressionContext(Context, _parentState);
		BoolExpressionContext _prevctx = _localctx;
		int _startState = 42;
		EnterRecursionRule(_localctx, 42, RULE_boolExpression, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 272;
			andExpression(0);
			}
			Context.Stop = TokenStream.LT(-1);
			State = 279;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,15,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new BoolExpressionContext(_parentctx, _parentState);
					PushNewRecursionContext(_localctx, _startState, RULE_boolExpression);
					State = 274;
					if (!(Precpred(Context, 2))) throw new FailedPredicateException(this, "Precpred(Context, 2)");
					State = 275;
					Match(OR);
					State = 276;
					andExpression(0);
					}
					} 
				}
				State = 281;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,15,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class AndExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public NotExpressionContext notExpression() {
			return GetRuleContext<NotExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AndExpressionContext andExpression() {
			return GetRuleContext<AndExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AND() { return GetToken(IsisParser.AND, 0); }
		public AndExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_andExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IIsisParserListener typedListener = listener as IIsisParserListener;
			if (typedListener != null) typedListener.EnterAndExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IIsisParserListener typedListener = listener as IIsisParserListener;
			if (typedListener != null) typedListener.ExitAndExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IIsisParserVisitor<TResult> typedVisitor = visitor as IIsisParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAndExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AndExpressionContext andExpression() {
		return andExpression(0);
	}

	private AndExpressionContext andExpression(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		AndExpressionContext _localctx = new AndExpressionContext(Context, _parentState);
		AndExpressionContext _prevctx = _localctx;
		int _startState = 44;
		EnterRecursionRule(_localctx, 44, RULE_andExpression, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 283;
			notExpression();
			}
			Context.Stop = TokenStream.LT(-1);
			State = 290;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,16,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new AndExpressionContext(_parentctx, _parentState);
					PushNewRecursionContext(_localctx, _startState, RULE_andExpression);
					State = 285;
					if (!(Precpred(Context, 2))) throw new FailedPredicateException(this, "Precpred(Context, 2)");
					State = 286;
					Match(AND);
					State = 287;
					notExpression();
					}
					} 
				}
				State = 292;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,16,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class NotExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOT() { return GetToken(IsisParser.NOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public NotExpressionContext notExpression() {
			return GetRuleContext<NotExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CompareExpressionContext compareExpression() {
			return GetRuleContext<CompareExpressionContext>(0);
		}
		public NotExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_notExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IIsisParserListener typedListener = listener as IIsisParserListener;
			if (typedListener != null) typedListener.EnterNotExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IIsisParserListener typedListener = listener as IIsisParserListener;
			if (typedListener != null) typedListener.ExitNotExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IIsisParserVisitor<TResult> typedVisitor = visitor as IIsisParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNotExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NotExpressionContext notExpression() {
		NotExpressionContext _localctx = new NotExpressionContext(Context, State);
		EnterRule(_localctx, 46, RULE_notExpression);
		try {
			State = 296;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case NOT:
				EnterOuterAlt(_localctx, 1);
				{
				State = 293;
				Match(NOT);
				State = 294;
				notExpression();
				}
				break;
			case CHARCONST:
			case STRINGCONST:
			case NUMBERCONST:
			case BOOLCONST:
			case LEFTBRACKET:
			case PLUS:
			case MINUS:
			case IDENTIFIER:
				EnterOuterAlt(_localctx, 2);
				{
				State = 295;
				compareExpression();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CompareExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public SumExpressionContext[] sumExpression() {
			return GetRuleContexts<SumExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public SumExpressionContext sumExpression(int i) {
			return GetRuleContext<SumExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CompareOperatorContext compareOperator() {
			return GetRuleContext<CompareOperatorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BOOLCONST() { return GetToken(IsisParser.BOOLCONST, 0); }
		public CompareExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_compareExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IIsisParserListener typedListener = listener as IIsisParserListener;
			if (typedListener != null) typedListener.EnterCompareExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IIsisParserListener typedListener = listener as IIsisParserListener;
			if (typedListener != null) typedListener.ExitCompareExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IIsisParserVisitor<TResult> typedVisitor = visitor as IIsisParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCompareExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CompareExpressionContext compareExpression() {
		CompareExpressionContext _localctx = new CompareExpressionContext(Context, State);
		EnterRule(_localctx, 48, RULE_compareExpression);
		try {
			State = 303;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,18,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 298;
				sumExpression(0);
				State = 299;
				compareOperator();
				State = 300;
				sumExpression(0);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 302;
				Match(BOOLCONST);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CompareOperatorContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUALS() { return GetToken(IsisParser.EQUALS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOTEQUALS() { return GetToken(IsisParser.NOTEQUALS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GREATER() { return GetToken(IsisParser.GREATER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GREATEREQUAL() { return GetToken(IsisParser.GREATEREQUAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LESSER() { return GetToken(IsisParser.LESSER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LESSEREQUAL() { return GetToken(IsisParser.LESSEREQUAL, 0); }
		public CompareOperatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_compareOperator; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IIsisParserListener typedListener = listener as IIsisParserListener;
			if (typedListener != null) typedListener.EnterCompareOperator(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IIsisParserListener typedListener = listener as IIsisParserListener;
			if (typedListener != null) typedListener.ExitCompareOperator(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IIsisParserVisitor<TResult> typedVisitor = visitor as IIsisParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCompareOperator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CompareOperatorContext compareOperator() {
		CompareOperatorContext _localctx = new CompareOperatorContext(Context, State);
		EnterRule(_localctx, 50, RULE_compareOperator);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 305;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << GREATEREQUAL) | (1L << LESSEREQUAL) | (1L << NOTEQUALS) | (1L << EQUALS) | (1L << GREATER) | (1L << LESSER))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SumExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public MultExpressionContext multExpression() {
			return GetRuleContext<MultExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SumExpressionContext sumExpression() {
			return GetRuleContext<SumExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SumOperatorContext sumOperator() {
			return GetRuleContext<SumOperatorContext>(0);
		}
		public SumExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_sumExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IIsisParserListener typedListener = listener as IIsisParserListener;
			if (typedListener != null) typedListener.EnterSumExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IIsisParserListener typedListener = listener as IIsisParserListener;
			if (typedListener != null) typedListener.ExitSumExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IIsisParserVisitor<TResult> typedVisitor = visitor as IIsisParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSumExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SumExpressionContext sumExpression() {
		return sumExpression(0);
	}

	private SumExpressionContext sumExpression(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		SumExpressionContext _localctx = new SumExpressionContext(Context, _parentState);
		SumExpressionContext _prevctx = _localctx;
		int _startState = 52;
		EnterRecursionRule(_localctx, 52, RULE_sumExpression, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 308;
			multExpression(0);
			}
			Context.Stop = TokenStream.LT(-1);
			State = 316;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,19,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new SumExpressionContext(_parentctx, _parentState);
					PushNewRecursionContext(_localctx, _startState, RULE_sumExpression);
					State = 310;
					if (!(Precpred(Context, 2))) throw new FailedPredicateException(this, "Precpred(Context, 2)");
					State = 311;
					sumOperator();
					State = 312;
					multExpression(0);
					}
					} 
				}
				State = 318;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,19,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class SumOperatorContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PLUS() { return GetToken(IsisParser.PLUS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MINUS() { return GetToken(IsisParser.MINUS, 0); }
		public SumOperatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_sumOperator; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IIsisParserListener typedListener = listener as IIsisParserListener;
			if (typedListener != null) typedListener.EnterSumOperator(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IIsisParserListener typedListener = listener as IIsisParserListener;
			if (typedListener != null) typedListener.ExitSumOperator(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IIsisParserVisitor<TResult> typedVisitor = visitor as IIsisParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSumOperator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SumOperatorContext sumOperator() {
		SumOperatorContext _localctx = new SumOperatorContext(Context, State);
		EnterRule(_localctx, 54, RULE_sumOperator);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 319;
			_la = TokenStream.LA(1);
			if ( !(_la==PLUS || _la==MINUS) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MultExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public UnaryExpressionContext unaryExpression() {
			return GetRuleContext<UnaryExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public MultExpressionContext multExpression() {
			return GetRuleContext<MultExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public MultOperatorContext multOperator() {
			return GetRuleContext<MultOperatorContext>(0);
		}
		public MultExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_multExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IIsisParserListener typedListener = listener as IIsisParserListener;
			if (typedListener != null) typedListener.EnterMultExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IIsisParserListener typedListener = listener as IIsisParserListener;
			if (typedListener != null) typedListener.ExitMultExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IIsisParserVisitor<TResult> typedVisitor = visitor as IIsisParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMultExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MultExpressionContext multExpression() {
		return multExpression(0);
	}

	private MultExpressionContext multExpression(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		MultExpressionContext _localctx = new MultExpressionContext(Context, _parentState);
		MultExpressionContext _prevctx = _localctx;
		int _startState = 56;
		EnterRecursionRule(_localctx, 56, RULE_multExpression, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 322;
			unaryExpression();
			}
			Context.Stop = TokenStream.LT(-1);
			State = 330;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,20,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new MultExpressionContext(_parentctx, _parentState);
					PushNewRecursionContext(_localctx, _startState, RULE_multExpression);
					State = 324;
					if (!(Precpred(Context, 2))) throw new FailedPredicateException(this, "Precpred(Context, 2)");
					State = 325;
					multOperator();
					State = 326;
					unaryExpression();
					}
					} 
				}
				State = 332;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,20,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class MultOperatorContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MULTSYMBOL() { return GetToken(IsisParser.MULTSYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DIVSYMBOL() { return GetToken(IsisParser.DIVSYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MODSYMBOL() { return GetToken(IsisParser.MODSYMBOL, 0); }
		public MultOperatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_multOperator; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IIsisParserListener typedListener = listener as IIsisParserListener;
			if (typedListener != null) typedListener.EnterMultOperator(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IIsisParserListener typedListener = listener as IIsisParserListener;
			if (typedListener != null) typedListener.ExitMultOperator(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IIsisParserVisitor<TResult> typedVisitor = visitor as IIsisParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMultOperator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MultOperatorContext multOperator() {
		MultOperatorContext _localctx = new MultOperatorContext(Context, State);
		EnterRule(_localctx, 58, RULE_multOperator);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 333;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << MULTSYMBOL) | (1L << DIVSYMBOL) | (1L << MODSYMBOL))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UnaryExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public UnaryOperatorContext unaryOperator() {
			return GetRuleContext<UnaryOperatorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public UnaryExpressionContext unaryExpression() {
			return GetRuleContext<UnaryExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FactorContext factor() {
			return GetRuleContext<FactorContext>(0);
		}
		public UnaryExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_unaryExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IIsisParserListener typedListener = listener as IIsisParserListener;
			if (typedListener != null) typedListener.EnterUnaryExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IIsisParserListener typedListener = listener as IIsisParserListener;
			if (typedListener != null) typedListener.ExitUnaryExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IIsisParserVisitor<TResult> typedVisitor = visitor as IIsisParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUnaryExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UnaryExpressionContext unaryExpression() {
		UnaryExpressionContext _localctx = new UnaryExpressionContext(Context, State);
		EnterRule(_localctx, 60, RULE_unaryExpression);
		try {
			State = 339;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case PLUS:
			case MINUS:
				EnterOuterAlt(_localctx, 1);
				{
				State = 335;
				unaryOperator();
				State = 336;
				unaryExpression();
				}
				break;
			case CHARCONST:
			case STRINGCONST:
			case NUMBERCONST:
			case BOOLCONST:
			case LEFTBRACKET:
			case IDENTIFIER:
				EnterOuterAlt(_localctx, 2);
				{
				State = 338;
				factor();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UnaryOperatorContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PLUS() { return GetToken(IsisParser.PLUS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MINUS() { return GetToken(IsisParser.MINUS, 0); }
		public UnaryOperatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_unaryOperator; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IIsisParserListener typedListener = listener as IIsisParserListener;
			if (typedListener != null) typedListener.EnterUnaryOperator(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IIsisParserListener typedListener = listener as IIsisParserListener;
			if (typedListener != null) typedListener.ExitUnaryOperator(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IIsisParserVisitor<TResult> typedVisitor = visitor as IIsisParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUnaryOperator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UnaryOperatorContext unaryOperator() {
		UnaryOperatorContext _localctx = new UnaryOperatorContext(Context, State);
		EnterRule(_localctx, 62, RULE_unaryOperator);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 341;
			_la = TokenStream.LA(1);
			if ( !(_la==PLUS || _la==MINUS) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FactorContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public VariableContext variable() {
			return GetRuleContext<VariableContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ConstantContext constant() {
			return GetRuleContext<ConstantContext>(0);
		}
		public FactorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_factor; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IIsisParserListener typedListener = listener as IIsisParserListener;
			if (typedListener != null) typedListener.EnterFactor(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IIsisParserListener typedListener = listener as IIsisParserListener;
			if (typedListener != null) typedListener.ExitFactor(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IIsisParserVisitor<TResult> typedVisitor = visitor as IIsisParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFactor(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FactorContext factor() {
		FactorContext _localctx = new FactorContext(Context, State);
		EnterRule(_localctx, 64, RULE_factor);
		try {
			State = 345;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case IDENTIFIER:
				EnterOuterAlt(_localctx, 1);
				{
				State = 343;
				variable();
				}
				break;
			case CHARCONST:
			case STRINGCONST:
			case NUMBERCONST:
			case BOOLCONST:
			case LEFTBRACKET:
				EnterOuterAlt(_localctx, 2);
				{
				State = 344;
				constant();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VariableContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(IsisParser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEFTBRACKET() { return GetToken(IsisParser.LEFTBRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NUMBERCONST() { return GetToken(IsisParser.NUMBERCONST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RIGHTBRACKET() { return GetToken(IsisParser.RIGHTBRACKET, 0); }
		public VariableContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_variable; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IIsisParserListener typedListener = listener as IIsisParserListener;
			if (typedListener != null) typedListener.EnterVariable(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IIsisParserListener typedListener = listener as IIsisParserListener;
			if (typedListener != null) typedListener.ExitVariable(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IIsisParserVisitor<TResult> typedVisitor = visitor as IIsisParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVariable(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VariableContext variable() {
		VariableContext _localctx = new VariableContext(Context, State);
		EnterRule(_localctx, 66, RULE_variable);
		try {
			State = 352;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,23,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 347;
				Match(IDENTIFIER);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 348;
				Match(IDENTIFIER);
				State = 349;
				Match(LEFTBRACKET);
				State = 350;
				Match(NUMBERCONST);
				State = 351;
				Match(RIGHTBRACKET);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConstantContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CHARCONST() { return GetToken(IsisParser.CHARCONST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRINGCONST() { return GetToken(IsisParser.STRINGCONST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BOOLCONST() { return GetToken(IsisParser.BOOLCONST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NUMBERCONST() { return GetToken(IsisParser.NUMBERCONST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEFTBRACKET() { return GetToken(IsisParser.LEFTBRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ConstantsContext constants() {
			return GetRuleContext<ConstantsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RIGHTBRACKET() { return GetToken(IsisParser.RIGHTBRACKET, 0); }
		public ConstantContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_constant; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IIsisParserListener typedListener = listener as IIsisParserListener;
			if (typedListener != null) typedListener.EnterConstant(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IIsisParserListener typedListener = listener as IIsisParserListener;
			if (typedListener != null) typedListener.ExitConstant(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IIsisParserVisitor<TResult> typedVisitor = visitor as IIsisParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConstant(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ConstantContext constant() {
		ConstantContext _localctx = new ConstantContext(Context, State);
		EnterRule(_localctx, 68, RULE_constant);
		try {
			State = 362;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case CHARCONST:
				EnterOuterAlt(_localctx, 1);
				{
				State = 354;
				Match(CHARCONST);
				}
				break;
			case STRINGCONST:
				EnterOuterAlt(_localctx, 2);
				{
				State = 355;
				Match(STRINGCONST);
				}
				break;
			case BOOLCONST:
				EnterOuterAlt(_localctx, 3);
				{
				State = 356;
				Match(BOOLCONST);
				}
				break;
			case NUMBERCONST:
				EnterOuterAlt(_localctx, 4);
				{
				State = 357;
				Match(NUMBERCONST);
				}
				break;
			case LEFTBRACKET:
				EnterOuterAlt(_localctx, 5);
				{
				State = 358;
				Match(LEFTBRACKET);
				State = 359;
				constants();
				State = 360;
				Match(RIGHTBRACKET);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConstantsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ConstantListContext constantList() {
			return GetRuleContext<ConstantListContext>(0);
		}
		public ConstantsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_constants; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IIsisParserListener typedListener = listener as IIsisParserListener;
			if (typedListener != null) typedListener.EnterConstants(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IIsisParserListener typedListener = listener as IIsisParserListener;
			if (typedListener != null) typedListener.ExitConstants(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IIsisParserVisitor<TResult> typedVisitor = visitor as IIsisParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConstants(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ConstantsContext constants() {
		ConstantsContext _localctx = new ConstantsContext(Context, State);
		EnterRule(_localctx, 70, RULE_constants);
		try {
			State = 366;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case CHARCONST:
			case STRINGCONST:
			case NUMBERCONST:
			case BOOLCONST:
			case LEFTBRACKET:
				EnterOuterAlt(_localctx, 1);
				{
				State = 364;
				constantList(0);
				}
				break;
			case RIGHTBRACKET:
				EnterOuterAlt(_localctx, 2);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConstantListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ConstantContext constant() {
			return GetRuleContext<ConstantContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ConstantListContext constantList() {
			return GetRuleContext<ConstantListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA() { return GetToken(IsisParser.COMMA, 0); }
		public ConstantListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_constantList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IIsisParserListener typedListener = listener as IIsisParserListener;
			if (typedListener != null) typedListener.EnterConstantList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IIsisParserListener typedListener = listener as IIsisParserListener;
			if (typedListener != null) typedListener.ExitConstantList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IIsisParserVisitor<TResult> typedVisitor = visitor as IIsisParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConstantList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ConstantListContext constantList() {
		return constantList(0);
	}

	private ConstantListContext constantList(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		ConstantListContext _localctx = new ConstantListContext(Context, _parentState);
		ConstantListContext _prevctx = _localctx;
		int _startState = 72;
		EnterRecursionRule(_localctx, 72, RULE_constantList, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 369;
			constant();
			}
			Context.Stop = TokenStream.LT(-1);
			State = 376;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,26,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new ConstantListContext(_parentctx, _parentState);
					PushNewRecursionContext(_localctx, _startState, RULE_constantList);
					State = 371;
					if (!(Precpred(Context, 2))) throw new FailedPredicateException(this, "Precpred(Context, 2)");
					State = 372;
					Match(COMMA);
					State = 373;
					constant();
					}
					} 
				}
				State = 378;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,26,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 3: return declarationList_sempred((DeclarationListContext)_localctx, predIndex);
		case 11: return argumentsList_sempred((ArgumentsListContext)_localctx, predIndex);
		case 14: return instructionsList_sempred((InstructionsListContext)_localctx, predIndex);
		case 21: return boolExpression_sempred((BoolExpressionContext)_localctx, predIndex);
		case 22: return andExpression_sempred((AndExpressionContext)_localctx, predIndex);
		case 26: return sumExpression_sempred((SumExpressionContext)_localctx, predIndex);
		case 28: return multExpression_sempred((MultExpressionContext)_localctx, predIndex);
		case 36: return constantList_sempred((ConstantListContext)_localctx, predIndex);
		}
		return true;
	}
	private bool declarationList_sempred(DeclarationListContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(Context, 2);
		}
		return true;
	}
	private bool argumentsList_sempred(ArgumentsListContext _localctx, int predIndex) {
		switch (predIndex) {
		case 1: return Precpred(Context, 2);
		}
		return true;
	}
	private bool instructionsList_sempred(InstructionsListContext _localctx, int predIndex) {
		switch (predIndex) {
		case 2: return Precpred(Context, 2);
		}
		return true;
	}
	private bool boolExpression_sempred(BoolExpressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 3: return Precpred(Context, 2);
		}
		return true;
	}
	private bool andExpression_sempred(AndExpressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 4: return Precpred(Context, 2);
		}
		return true;
	}
	private bool sumExpression_sempred(SumExpressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 5: return Precpred(Context, 2);
		}
		return true;
	}
	private bool multExpression_sempred(MultExpressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 6: return Precpred(Context, 2);
		}
		return true;
	}
	private bool constantList_sempred(ConstantListContext _localctx, int predIndex) {
		switch (predIndex) {
		case 7: return Precpred(Context, 2);
		}
		return true;
	}

	private static int[] _serializedATN = {
		4,1,56,380,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,6,2,7,
		7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,7,14,
		2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,7,21,
		2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,7,27,2,28,7,28,
		2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,7,33,2,34,7,34,2,35,7,35,
		2,36,7,36,1,0,1,0,1,0,1,0,1,0,1,0,1,0,3,0,82,8,0,1,1,1,1,3,1,86,8,1,1,
		2,1,2,1,2,1,2,1,3,1,3,1,3,1,3,1,3,5,3,97,8,3,10,3,12,3,100,9,3,1,4,1,4,
		1,4,1,4,3,4,106,8,4,1,5,1,5,1,5,1,6,1,6,1,6,1,6,3,6,115,8,6,1,7,1,7,1,
		8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,9,1,9,3,9,130,8,9,1,10,1,10,3,10,134,
		8,10,1,11,1,11,1,11,1,11,1,11,1,11,5,11,142,8,11,10,11,12,11,145,9,11,
		1,12,1,12,1,12,1,13,1,13,3,13,152,8,13,1,14,1,14,1,14,1,14,1,14,5,14,159,
		8,14,10,14,12,14,162,9,14,1,15,1,15,1,15,1,15,1,15,1,15,1,15,3,15,171,
		8,15,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,
		1,16,1,16,1,16,1,16,1,16,1,16,1,16,3,16,193,8,16,1,17,1,17,1,17,1,17,1,
		17,1,17,1,17,1,17,1,17,1,17,1,17,1,17,1,17,1,17,1,17,1,17,1,17,1,17,1,
		17,1,17,1,17,1,17,1,17,1,17,1,17,1,17,1,17,1,17,1,17,3,17,224,8,17,1,18,
		1,18,1,18,1,18,1,18,1,18,3,18,232,8,18,1,19,1,19,1,19,1,20,1,20,1,20,1,
		20,1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,
		20,1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,
		20,1,20,3,20,270,8,20,1,21,1,21,1,21,1,21,1,21,1,21,5,21,278,8,21,10,21,
		12,21,281,9,21,1,22,1,22,1,22,1,22,1,22,1,22,5,22,289,8,22,10,22,12,22,
		292,9,22,1,23,1,23,1,23,3,23,297,8,23,1,24,1,24,1,24,1,24,1,24,3,24,304,
		8,24,1,25,1,25,1,26,1,26,1,26,1,26,1,26,1,26,1,26,5,26,315,8,26,10,26,
		12,26,318,9,26,1,27,1,27,1,28,1,28,1,28,1,28,1,28,1,28,1,28,5,28,329,8,
		28,10,28,12,28,332,9,28,1,29,1,29,1,30,1,30,1,30,1,30,3,30,340,8,30,1,
		31,1,31,1,32,1,32,3,32,346,8,32,1,33,1,33,1,33,1,33,1,33,3,33,353,8,33,
		1,34,1,34,1,34,1,34,1,34,1,34,1,34,1,34,3,34,363,8,34,1,35,1,35,3,35,367,
		8,35,1,36,1,36,1,36,1,36,1,36,1,36,5,36,375,8,36,10,36,12,36,378,9,36,
		1,36,0,8,6,22,28,42,44,52,56,72,37,0,2,4,6,8,10,12,14,16,18,20,22,24,26,
		28,30,32,34,36,38,40,42,44,46,48,50,52,54,56,58,60,62,64,66,68,70,72,0,
		4,2,0,8,9,11,12,2,0,44,47,51,52,1,0,38,39,1,0,41,43,385,0,81,1,0,0,0,2,
		85,1,0,0,0,4,87,1,0,0,0,6,91,1,0,0,0,8,105,1,0,0,0,10,107,1,0,0,0,12,114,
		1,0,0,0,14,116,1,0,0,0,16,118,1,0,0,0,18,129,1,0,0,0,20,133,1,0,0,0,22,
		135,1,0,0,0,24,146,1,0,0,0,26,151,1,0,0,0,28,153,1,0,0,0,30,170,1,0,0,
		0,32,192,1,0,0,0,34,223,1,0,0,0,36,231,1,0,0,0,38,233,1,0,0,0,40,269,1,
		0,0,0,42,271,1,0,0,0,44,282,1,0,0,0,46,296,1,0,0,0,48,303,1,0,0,0,50,305,
		1,0,0,0,52,307,1,0,0,0,54,319,1,0,0,0,56,321,1,0,0,0,58,333,1,0,0,0,60,
		339,1,0,0,0,62,341,1,0,0,0,64,345,1,0,0,0,66,352,1,0,0,0,68,362,1,0,0,
		0,70,366,1,0,0,0,72,368,1,0,0,0,74,75,3,2,1,0,75,76,3,4,2,0,76,77,5,0,
		0,1,77,82,1,0,0,0,78,79,3,2,1,0,79,80,5,0,0,1,80,82,1,0,0,0,81,74,1,0,
		0,0,81,78,1,0,0,0,82,1,1,0,0,0,83,86,3,6,3,0,84,86,1,0,0,0,85,83,1,0,0,
		0,85,84,1,0,0,0,86,3,1,0,0,0,87,88,5,4,0,0,88,89,3,26,13,0,89,90,5,5,0,
		0,90,5,1,0,0,0,91,92,6,3,-1,0,92,93,3,8,4,0,93,98,1,0,0,0,94,95,10,2,0,
		0,95,97,3,8,4,0,96,94,1,0,0,0,97,100,1,0,0,0,98,96,1,0,0,0,98,99,1,0,0,
		0,99,7,1,0,0,0,100,98,1,0,0,0,101,102,3,10,5,0,102,103,5,6,0,0,103,106,
		1,0,0,0,104,106,3,16,8,0,105,101,1,0,0,0,105,104,1,0,0,0,106,9,1,0,0,0,
		107,108,3,14,7,0,108,109,3,12,6,0,109,11,1,0,0,0,110,115,5,53,0,0,111,
		112,5,53,0,0,112,113,5,25,0,0,113,115,5,26,0,0,114,110,1,0,0,0,114,111,
		1,0,0,0,115,13,1,0,0,0,116,117,7,0,0,0,117,15,1,0,0,0,118,119,3,18,9,0,
		119,120,5,53,0,0,120,121,5,23,0,0,121,122,3,20,10,0,122,123,5,24,0,0,123,
		124,5,27,0,0,124,125,3,28,14,0,125,126,5,28,0,0,126,17,1,0,0,0,127,130,
		3,14,7,0,128,130,5,7,0,0,129,127,1,0,0,0,129,128,1,0,0,0,130,19,1,0,0,
		0,131,134,3,22,11,0,132,134,1,0,0,0,133,131,1,0,0,0,133,132,1,0,0,0,134,
		21,1,0,0,0,135,136,6,11,-1,0,136,137,3,24,12,0,137,143,1,0,0,0,138,139,
		10,2,0,0,139,140,5,31,0,0,140,142,3,24,12,0,141,138,1,0,0,0,142,145,1,
		0,0,0,143,141,1,0,0,0,143,144,1,0,0,0,144,23,1,0,0,0,145,143,1,0,0,0,146,
		147,3,14,7,0,147,148,3,12,6,0,148,25,1,0,0,0,149,152,3,28,14,0,150,152,
		1,0,0,0,151,149,1,0,0,0,151,150,1,0,0,0,152,27,1,0,0,0,153,154,6,14,-1,
		0,154,155,3,30,15,0,155,160,1,0,0,0,156,157,10,2,0,0,157,159,3,30,15,0,
		158,156,1,0,0,0,159,162,1,0,0,0,160,158,1,0,0,0,160,161,1,0,0,0,161,29,
		1,0,0,0,162,160,1,0,0,0,163,164,3,40,20,0,164,165,5,6,0,0,165,171,1,0,
		0,0,166,171,3,32,16,0,167,171,3,34,17,0,168,171,3,36,18,0,169,171,3,38,
		19,0,170,163,1,0,0,0,170,166,1,0,0,0,170,167,1,0,0,0,170,168,1,0,0,0,170,
		169,1,0,0,0,171,31,1,0,0,0,172,173,5,16,0,0,173,174,5,23,0,0,174,175,3,
		42,21,0,175,176,5,24,0,0,176,177,5,27,0,0,177,178,3,26,13,0,178,179,5,
		28,0,0,179,193,1,0,0,0,180,181,5,16,0,0,181,182,5,23,0,0,182,183,3,42,
		21,0,183,184,5,24,0,0,184,185,5,27,0,0,185,186,3,26,13,0,186,187,5,28,
		0,0,187,188,5,17,0,0,188,189,5,27,0,0,189,190,3,26,13,0,190,191,5,28,0,
		0,191,193,1,0,0,0,192,172,1,0,0,0,192,180,1,0,0,0,193,33,1,0,0,0,194,195,
		5,15,0,0,195,196,5,23,0,0,196,197,3,40,20,0,197,198,5,6,0,0,198,199,3,
		42,21,0,199,200,5,6,0,0,200,201,3,40,20,0,201,202,5,24,0,0,202,203,5,27,
		0,0,203,204,3,26,13,0,204,205,5,28,0,0,205,224,1,0,0,0,206,207,5,13,0,
		0,207,208,5,23,0,0,208,209,3,42,21,0,209,210,5,24,0,0,210,211,5,27,0,0,
		211,212,3,26,13,0,212,213,5,28,0,0,213,224,1,0,0,0,214,215,5,14,0,0,215,
		216,5,27,0,0,216,217,3,26,13,0,217,218,5,28,0,0,218,219,5,13,0,0,219,220,
		5,23,0,0,220,221,3,42,21,0,221,222,5,24,0,0,222,224,1,0,0,0,223,194,1,
		0,0,0,223,206,1,0,0,0,223,214,1,0,0,0,224,35,1,0,0,0,225,226,5,20,0,0,
		226,232,5,6,0,0,227,228,5,20,0,0,228,229,3,40,20,0,229,230,5,6,0,0,230,
		232,1,0,0,0,231,225,1,0,0,0,231,227,1,0,0,0,232,37,1,0,0,0,233,234,5,18,
		0,0,234,235,5,6,0,0,235,39,1,0,0,0,236,237,3,66,33,0,237,238,5,40,0,0,
		238,239,3,40,20,0,239,270,1,0,0,0,240,241,3,66,33,0,241,242,5,34,0,0,242,
		243,3,40,20,0,243,270,1,0,0,0,244,245,3,66,33,0,245,246,5,35,0,0,246,247,
		3,40,20,0,247,270,1,0,0,0,248,249,3,66,33,0,249,250,5,36,0,0,250,251,3,
		40,20,0,251,270,1,0,0,0,252,253,3,66,33,0,253,254,5,37,0,0,254,255,3,40,
		20,0,255,270,1,0,0,0,256,257,3,66,33,0,257,258,5,32,0,0,258,270,1,0,0,
		0,259,260,3,66,33,0,260,261,5,33,0,0,261,270,1,0,0,0,262,270,3,42,21,0,
		263,270,3,52,26,0,264,270,3,10,5,0,265,266,3,10,5,0,266,267,5,40,0,0,267,
		268,3,40,20,0,268,270,1,0,0,0,269,236,1,0,0,0,269,240,1,0,0,0,269,244,
		1,0,0,0,269,248,1,0,0,0,269,252,1,0,0,0,269,256,1,0,0,0,269,259,1,0,0,
		0,269,262,1,0,0,0,269,263,1,0,0,0,269,264,1,0,0,0,269,265,1,0,0,0,270,
		41,1,0,0,0,271,272,6,21,-1,0,272,273,3,44,22,0,273,279,1,0,0,0,274,275,
		10,2,0,0,275,276,5,49,0,0,276,278,3,44,22,0,277,274,1,0,0,0,278,281,1,
		0,0,0,279,277,1,0,0,0,279,280,1,0,0,0,280,43,1,0,0,0,281,279,1,0,0,0,282,
		283,6,22,-1,0,283,284,3,46,23,0,284,290,1,0,0,0,285,286,10,2,0,0,286,287,
		5,48,0,0,287,289,3,46,23,0,288,285,1,0,0,0,289,292,1,0,0,0,290,288,1,0,
		0,0,290,291,1,0,0,0,291,45,1,0,0,0,292,290,1,0,0,0,293,294,5,50,0,0,294,
		297,3,46,23,0,295,297,3,48,24,0,296,293,1,0,0,0,296,295,1,0,0,0,297,47,
		1,0,0,0,298,299,3,52,26,0,299,300,3,50,25,0,300,301,3,52,26,0,301,304,
		1,0,0,0,302,304,5,22,0,0,303,298,1,0,0,0,303,302,1,0,0,0,304,49,1,0,0,
		0,305,306,7,1,0,0,306,51,1,0,0,0,307,308,6,26,-1,0,308,309,3,56,28,0,309,
		316,1,0,0,0,310,311,10,2,0,0,311,312,3,54,27,0,312,313,3,56,28,0,313,315,
		1,0,0,0,314,310,1,0,0,0,315,318,1,0,0,0,316,314,1,0,0,0,316,317,1,0,0,
		0,317,53,1,0,0,0,318,316,1,0,0,0,319,320,7,2,0,0,320,55,1,0,0,0,321,322,
		6,28,-1,0,322,323,3,60,30,0,323,330,1,0,0,0,324,325,10,2,0,0,325,326,3,
		58,29,0,326,327,3,60,30,0,327,329,1,0,0,0,328,324,1,0,0,0,329,332,1,0,
		0,0,330,328,1,0,0,0,330,331,1,0,0,0,331,57,1,0,0,0,332,330,1,0,0,0,333,
		334,7,3,0,0,334,59,1,0,0,0,335,336,3,62,31,0,336,337,3,60,30,0,337,340,
		1,0,0,0,338,340,3,64,32,0,339,335,1,0,0,0,339,338,1,0,0,0,340,61,1,0,0,
		0,341,342,7,2,0,0,342,63,1,0,0,0,343,346,3,66,33,0,344,346,3,68,34,0,345,
		343,1,0,0,0,345,344,1,0,0,0,346,65,1,0,0,0,347,353,5,53,0,0,348,349,5,
		53,0,0,349,350,5,25,0,0,350,351,5,21,0,0,351,353,5,26,0,0,352,347,1,0,
		0,0,352,348,1,0,0,0,353,67,1,0,0,0,354,363,5,2,0,0,355,363,5,3,0,0,356,
		363,5,22,0,0,357,363,5,21,0,0,358,359,5,25,0,0,359,360,3,70,35,0,360,361,
		5,26,0,0,361,363,1,0,0,0,362,354,1,0,0,0,362,355,1,0,0,0,362,356,1,0,0,
		0,362,357,1,0,0,0,362,358,1,0,0,0,363,69,1,0,0,0,364,367,3,72,36,0,365,
		367,1,0,0,0,366,364,1,0,0,0,366,365,1,0,0,0,367,71,1,0,0,0,368,369,6,36,
		-1,0,369,370,3,68,34,0,370,376,1,0,0,0,371,372,10,2,0,0,372,373,5,31,0,
		0,373,375,3,68,34,0,374,371,1,0,0,0,375,378,1,0,0,0,376,374,1,0,0,0,376,
		377,1,0,0,0,377,73,1,0,0,0,378,376,1,0,0,0,27,81,85,98,105,114,129,133,
		143,151,160,170,192,223,231,269,279,290,296,303,316,330,339,345,352,362,
		366,376
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
